<?xml version='1.0'?>

<effect>
	<include name="DeferredRenderingUtil.fxml"/>
	<include name="Quaternion.fxml"/>
	<include name="util.fxml"/>

	<macro name="ALPHA_TEST_THRESHOLD" value="0.2"/>
	<macro name="NORMAL_THRESHOLD" value="0.7"/>
	
	<cbuffer name="per_frame">
		<parameter type="float4x4" name="mvp"/>
		<parameter type="float4x4" name="model_view"/>
		<parameter type="float4x4" name="inv_mv"/>
	</cbuffer>

	<cbuffer name="model">
		<parameter type="float3" name="pos_center"/>
		<parameter type="float3" name="pos_extent"/>
		<parameter type="float2" name="tc_center"/>
		<parameter type="float2" name="tc_extent"/>
		<parameter type="float4" name="diffuse_clr"/>
		<parameter type="float4" name="specular_clr"/>
		<parameter type="float2" name="shininess_clr"/>
		<parameter type="float4" name="emit_clr"/>
		<parameter type="float" name="opacity_clr"/>
		<parameter type="int" name="normal_map_enabled"/>
		<parameter type="int" name="height_map_enabled"/>
		<parameter type="int" name="opacity_map_enabled"/>
	</cbuffer>

	<parameter type="texture2D" name="diffuse_tex"/>
	<parameter type="texture2D" name="specular_tex"/>
	<parameter type="texture2D" name="shininess_tex"/>
	<parameter type="texture2D" name="emit_tex"/>
	<parameter type="texture2D" name="normal_tex"/>
	<parameter type="texture2D" name="height_tex"/>

	<parameter type="sampler" name="point_sampler">
		<state name="filtering" value="min_mag_mip_point"/>
		<state name="address_u" value="clamp"/>
		<state name="address_v" value="clamp"/>
	</parameter>
	<parameter type="sampler" name="bilinear_sampler">
		<state name="filtering" value="min_mag_linear_mip_point"/>
		<state name="address_u" value="wrap"/>
		<state name="address_v" value="wrap"/>
	</parameter>
	<parameter type="sampler" name="trilinear_sampler">
		<state name="filtering" value="min_mag_mip_linear"/>
		<state name="address_u" value="wrap"/>
		<state name="address_v" value="wrap"/>
	</parameter>
	<parameter type="sampler" name="aniso_sampler">
		<state name="filtering" value="anisotropic"/>
		<state name="address_u" value="wrap"/>
		<state name="address_v" value="wrap"/>
		<state name="max_anisotropy" value="4"/>
	</parameter>

	<parameter type="texture2D" name="normals_fitting_tex">
		<annotation type="string" name="SasResourceAddress" value="normals_fitting.dds"/>
	</parameter>

	<parameter type="texture2D" name="opaque_depth_tex"/>
	<parameter type="texture2D" name="g_buffer_rt0_tex"/>

	<parameter type="sampler" name="bilinear_border_sampler">
		<state name="filtering" value="min_mag_linear_mip_point"/>
		<state name="address_u" value="border"/>
		<state name="address_v" value="border"/>
		<state name="border_clr" r="0" g="0" b="0" a="0"/>
	</parameter>

	<shader>
		<![CDATA[
#if KLAYGE_D3D11
#if KLAYGE_SHADER_MODEL >= 4
#define NOPERSPECTIVE_SUPPORT
#endif
#endif

void DepthVS(float4 pos : POSITION,
			float2 texcoord : TEXCOORD0,
			float4 tangent_quat : TANGENT,
			out float3 oTexCoordDepth : TEXCOORD0,
#ifdef NOPERSPECTIVE_SUPPORT
			out noperspective float2 oScreenTc : TEXCOORD2,
#else
			out float3 oScreenTc : TEXCOORD2,
#endif
			out float4 oPos : SV_Position)
{
	pos = float4(pos.xyz * pos_extent + pos_center, 1);
	texcoord = texcoord * tc_extent + tc_center;
	
	oPos = mul(pos, mvp);
	oTexCoordDepth.xy = texcoord;
	oTexCoordDepth.z = oPos.w;
	
	oScreenTc.xy = oPos.xy / oPos.w * 0.5f;
	oScreenTc.y *= KLAYGE_FLIPPING;
	oScreenTc.xy += 0.5f;
	
#ifndef NOPERSPECTIVE_SUPPORT
	oScreenTc.z = oPos.w;
	oScreenTc.xy *= oScreenTc.z;
#endif
}

float4 DepthPS(float3 texcoord_depth : TEXCOORD0) : SV_Target
{
	return texcoord_depth.z;
}

float4 DepthAlphaTestPS(float3 texcoord_depth : TEXCOORD0) : SV_Target
{
	clip(diffuse_tex.Sample(bilinear_sampler, texcoord_depth.xy).a - ALPHA_TEST_THRESHOLD);
	return texcoord_depth.z;
}

float4 DepthAlphaBlendPS(float3 texcoord_depth : TEXCOORD0,
#ifdef NOPERSPECTIVE_SUPPORT
					noperspective float2 screen_tc : TEXCOORD2
#else
					float3 screen_tc_w : TEXCOORD2
#endif
		) : SV_Target
{
#ifndef NOPERSPECTIVE_SUPPORT
	float2 screen_tc = screen_tc_w.xy / screen_tc_w.z;
#endif

	clip(opaque_depth_tex.Sample(point_sampler, screen_tc).r - texcoord_depth.z);	
	return texcoord_depth.z;
}

void GBufferVS(float4 pos : POSITION,
			float2 texcoord : TEXCOORD0,
			float4 tangent_quat : TANGENT,
			out float4 oTexCoord_2xy : TEXCOORD0,
			out float4 oTsToView0_2z : TEXCOORD1,
			out float4 oTsToView1_Depth : TEXCOORD2,
#ifdef NOPERSPECTIVE_SUPPORT
			out noperspective float2 oScreenTc : TEXCOORD3,
#else
			out float3 oScreenTc : TEXCOORD3,
#endif
			out float4 oPos : SV_Position)
{
	pos = float4(pos.xyz * pos_extent + pos_center, 1);
	texcoord = texcoord * tc_extent + tc_center;
	
	oPos = mul(pos, mvp);
	oTexCoord_2xy.xy = texcoord;

	tangent_quat = tangent_quat * 2 - 1;

	float3x3 obj_to_ts;
	obj_to_ts[0] = transform_quat(float3(1, 0, 0), tangent_quat);
	obj_to_ts[1] = transform_quat(float3(0, 1, 0), tangent_quat) * sign(tangent_quat.w);
	obj_to_ts[2] = transform_quat(float3(0, 0, 1), tangent_quat);
	float3x3 ts_to_view = mul(obj_to_ts, (float3x3)model_view);
	oTsToView0_2z.xyz = ts_to_view[0];
	oTsToView1_Depth.xyz = ts_to_view[1];
	oTexCoord_2xy.zw = ts_to_view[2].xy;
	oTsToView0_2z.w = ts_to_view[2].z;
	
	oTsToView1_Depth.w = oPos.w;
	
	oScreenTc.xy = oPos.xy / oPos.w * 0.5f;
	oScreenTc.y *= KLAYGE_FLIPPING;
	oScreenTc.xy += 0.5f;
	
#ifndef NOPERSPECTIVE_SUPPORT
	oScreenTc.z = oPos.w;
	oScreenTc.xy *= oScreenTc.z;
#endif
}

float3 RestoreNormal(float4 texcoord_2xy, float4 ts_to_view0_2z, float3 ts_to_view1)
{
	float3 normal = normalize(float3(texcoord_2xy.zw, ts_to_view0_2z.w));
	if (normal_map_enabled)
	{
		float3x3 ts_to_view;
		ts_to_view[0] = normalize(ts_to_view0_2z.xyz);
		ts_to_view[1] = normalize(ts_to_view1);
		ts_to_view[2] = normal;
		normal = normalize(mul(decompress_normal(normal_tex.Sample(trilinear_sampler, texcoord_2xy.xy)), ts_to_view));
	}
	
	float3 fitting_tc = FittingCoord(normal);
	normal *= fitting_tc.z * normals_fitting_tex.Sample(bilinear_sampler, fitting_tc.xy).r;
	return normal;
}

float4 ConstructGBufferRT0(float4 texcoord_2xy, float4 ts_to_view0_2z, float3 ts_to_view1)
{
	float3 normal = RestoreNormal(texcoord_2xy, ts_to_view0_2z, ts_to_view1);
	float shininess;
	if (shininess_clr.y > 0.5f)
	{
		shininess = shininess_tex.Sample(aniso_sampler, texcoord_2xy.xy).r;
	}
	else
	{
		shininess = shininess_clr.r;
	}
	return StoreGBufferRT0(normal, shininess);
}

float4 ConstructGBufferRT1(float4 texcoord_2xy, float4 ts_to_view0_2z, float3 ts_to_view1)
{
	float3 diffuse;
	if (diffuse_clr.w > 0.5f)
	{
		diffuse = diffuse_tex.Sample(aniso_sampler, texcoord_2xy.xy).rgb;
	}
	else
	{
		diffuse = diffuse_clr.rgb;
	}
	
	float3 specular;
	if (specular_clr.w > 0.5f)
	{
		specular = specular_tex.Sample(aniso_sampler, texcoord_2xy.xy).rgb;
	}
	else
	{
		specular = specular_clr.rgb;
	}

	return StoreGBufferRT1(diffuse, specular);
}

void ConstructMRTGBuffer(float4 texcoord_2xy, float4 ts_to_view0_2z, float3 ts_to_view1,
					out float4 mrt_0, out float4 mrt_1)
{
	float3 normal = RestoreNormal(texcoord_2xy, ts_to_view0_2z, ts_to_view1);

	float3 diffuse;
	if (diffuse_clr.w > 0.5f)
	{
		diffuse = diffuse_tex.Sample(aniso_sampler, texcoord_2xy.xy).rgb;
	}
	else
	{
		diffuse = diffuse_clr.rgb;
	}
	
	float3 specular;
	if (specular_clr.w > 0.5f)
	{
		specular = specular_tex.Sample(aniso_sampler, texcoord_2xy.xy).rgb;
	}
	else
	{
		specular = specular_clr.rgb;
	}
	
	float shininess;
	if (shininess_clr.y > 0.5f)
	{
		shininess = shininess_tex.Sample(aniso_sampler, texcoord_2xy.xy).r;
	}
	else
	{
		shininess = shininess_clr.r;
	}
	
	StoreGBufferMRT(normal, specular, shininess, diffuse,
		mrt_0, mrt_1);
}

float4 GBufferRT0PS(float4 texcoord_2xy : TEXCOORD0, float4 ts_to_view0_2z : TEXCOORD1, float3 ts_to_view1 : TEXCOORD2) : SV_Target
{
	return ConstructGBufferRT0(texcoord_2xy, ts_to_view0_2z, ts_to_view1);
}

float4 GBufferAlphaTestRT0PS(float4 texcoord_2xy : TEXCOORD0, float4 ts_to_view0_2z : TEXCOORD1, float3 ts_to_view1 : TEXCOORD2) : SV_Target
{
	clip(diffuse_tex.Sample(bilinear_sampler, texcoord_2xy.xy).a - ALPHA_TEST_THRESHOLD);
	return ConstructGBufferRT0(texcoord_2xy, ts_to_view0_2z, ts_to_view1);
}

float4 GBufferAlphaBlendRT0PS(float4 texcoord_2xy : TEXCOORD0, float4 ts_to_view0_2z : TEXCOORD1, float4 ts_to_view1_depth : TEXCOORD2,
#ifdef NOPERSPECTIVE_SUPPORT
					noperspective float2 screen_tc : TEXCOORD3
#else
					float3 screen_tc_w : TEXCOORD3
#endif
			) : SV_Target
{
#ifndef NOPERSPECTIVE_SUPPORT
	float2 screen_tc = screen_tc_w.xy / screen_tc_w.z;
#endif

	clip(opaque_depth_tex.Sample(point_sampler, screen_tc).r - ts_to_view1_depth.w);	
	return ConstructGBufferRT0(texcoord_2xy, ts_to_view0_2z, ts_to_view1_depth.xyz);
}

float4 GBufferRT1PS(float4 texcoord_2xy : TEXCOORD0, float4 ts_to_view0_2z : TEXCOORD1, float3 ts_to_view1 : TEXCOORD2) : SV_Target
{
	return ConstructGBufferRT1(texcoord_2xy, ts_to_view0_2z, ts_to_view1);
}

float4 GBufferAlphaTestRT1PS(float4 texcoord_2xy : TEXCOORD0, float4 ts_to_view0_2z : TEXCOORD1, float3 ts_to_view1 : TEXCOORD2) : SV_Target
{
	clip(diffuse_tex.Sample(bilinear_sampler, texcoord_2xy.xy).a - ALPHA_TEST_THRESHOLD);
	return ConstructGBufferRT1(texcoord_2xy, ts_to_view0_2z, ts_to_view1);
}

float4 GBufferAlphaBlendRT1PS(float4 texcoord_2xy : TEXCOORD0, float4 ts_to_view0_2z : TEXCOORD1, float4 ts_to_view1_depth : TEXCOORD2,
#ifdef NOPERSPECTIVE_SUPPORT
					noperspective float2 screen_tc : TEXCOORD3
#else
					float3 screen_tc_w : TEXCOORD3
#endif
			) : SV_Target
{
#ifndef NOPERSPECTIVE_SUPPORT
	float2 screen_tc = screen_tc_w.xy / screen_tc_w.z;
#endif

	clip(opaque_depth_tex.Sample(point_sampler, screen_tc).r - ts_to_view1_depth.w);	
	return ConstructGBufferRT1(texcoord_2xy, ts_to_view0_2z, ts_to_view1_depth.xyz);
}

void GBufferMRTPS(float4 texcoord_2xy : TEXCOORD0, float4 ts_to_view0_2z : TEXCOORD1, float3 ts_to_view1 : TEXCOORD2,
					out float4 mrt_0 : SV_Target0, out float4 mrt_1 : SV_Target1)
{
	ConstructMRTGBuffer(texcoord_2xy, ts_to_view0_2z, ts_to_view1, mrt_0, mrt_1);
}

void GBufferAlphaTestMRTPS(float4 texcoord_2xy : TEXCOORD0, float4 ts_to_view0_2z : TEXCOORD1, float3 ts_to_view1 : TEXCOORD2,
					out float4 mrt_0 : SV_Target0, out float4 mrt_1 : SV_Target1)
{
	clip(diffuse_tex.Sample(bilinear_sampler, texcoord_2xy.xy).a - ALPHA_TEST_THRESHOLD);
	ConstructMRTGBuffer(texcoord_2xy, ts_to_view0_2z, ts_to_view1, mrt_0, mrt_1);
}

void GBufferAlphaBlendMRTPS(float4 texcoord_2xy : TEXCOORD0, float4 ts_to_view0_2z : TEXCOORD1, float4 ts_to_view1_depth : TEXCOORD2,
#ifdef NOPERSPECTIVE_SUPPORT
					noperspective float2 screen_tc : TEXCOORD3,
#else
					float3 screen_tc_w : TEXCOORD3,
#endif
					out float4 mrt_0 : SV_Target0, out float4 mrt_1 : SV_Target1)
{
#ifndef NOPERSPECTIVE_SUPPORT
	float2 screen_tc = screen_tc_w.xy / screen_tc_w.z;
#endif

	clip(opaque_depth_tex.Sample(point_sampler, screen_tc).r - ts_to_view1_depth.w);
	ConstructMRTGBuffer(texcoord_2xy, ts_to_view0_2z, ts_to_view1_depth.xyz, mrt_0, mrt_1);
}

void DecalGBufferVS(float4 pos : POSITION,
			out float4 oTexCoord_2xy : TEXCOORD0,
			out float4 oTsToView0_2z : TEXCOORD1,
			out float4 oTsToView1_Depth : TEXCOORD2,
#ifdef NOPERSPECTIVE_SUPPORT
			out noperspective float2 oScreenTc : TEXCOORD3,
#else
			out float3 oScreenTc : TEXCOORD3,
#endif
			out float3 oViewDir : TEXCOORD4,
			out float4 oPos : SV_Position)
{
	oPos = mul(pos, mvp);
	oTexCoord_2xy.xy = float2(pos.x * 0.5f + 0.5f, KLAYGE_FLIPPING * pos.y * 0.5f + 0.5f);;

	float3x3 obj_to_ts;
	obj_to_ts[0] = float3(1, 0, 0);
	obj_to_ts[1] = float3(0, -1, 0);
	obj_to_ts[2] = float3(0, 0, -1);
	float3x3 ts_to_view = mul(obj_to_ts, (float3x3)model_view);
	oTsToView0_2z.xyz = ts_to_view[0];
	oTsToView1_Depth.xyz = ts_to_view[1];
	oTexCoord_2xy.zw = ts_to_view[2].xy;
	oTsToView0_2z.w = ts_to_view[2].z;
	
	oTsToView1_Depth.w = oPos.w;
	
	oScreenTc.xy = oPos.xy / oPos.w * 0.5f;
	oScreenTc.y *= KLAYGE_FLIPPING;
	oScreenTc.xy += 0.5f;
	
#ifndef NOPERSPECTIVE_SUPPORT
	oScreenTc.z = oPos.w;
	oScreenTc.xy *= oScreenTc.z;
#endif

	oViewDir = mul(pos, model_view).xyz;
}

float4 DecalGBufferAlphaTestRT0PS(float4 texcoord_2xy : TEXCOORD0, float4 ts_to_view0_2z : TEXCOORD1, float3 ts_to_view1 : TEXCOORD2,
#ifdef NOPERSPECTIVE_SUPPORT
					noperspective float2 screen_tc : TEXCOORD3,
#else
					float3 screen_tc_w : TEXCOORD3,
#endif
					float3 view_dir : TEXCOORD4) : SV_Target
{
#ifndef NOPERSPECTIVE_SUPPORT
	float2 screen_tc = screen_tc_w.xy / screen_tc_w.z;
#endif

	float3 pos_es = view_dir * (opaque_depth_tex.Sample(point_sampler, screen_tc).r / view_dir.z);
	
	float3 decal_normal = normalize(float3(texcoord_2xy.zw, ts_to_view0_2z.w));
	float3 pixel_normal = GetNormal(g_buffer_rt0_tex.Sample(bilinear_sampler, screen_tc));
	clip(dot(decal_normal, pixel_normal) - NORMAL_THRESHOLD);
	
	float4 decal_pos = mul(float4(pos_es, 1), inv_mv);
	if (any(abs(decal_pos.xyz) > decal_pos.w))
	{
		discard;
	}
	
	decal_pos /= decal_pos.w;
	texcoord_2xy.xy = float2(decal_pos.x, -decal_pos.y) * 0.5f + 0.5f;
		
	float3 normal = RestoreNormal(texcoord_2xy, ts_to_view0_2z, ts_to_view1);
	
	float shininess;
	if (shininess_clr.y > 0.5f)
	{
		shininess = shininess_tex.Sample(aniso_sampler, texcoord_2xy.xy).r;
	}
	else
	{
		shininess = shininess_clr.r;
	}
	
	return StoreGBufferRT0(normal, shininess);
}

float4 DecalGBufferAlphaTestRT1PS(float4 texcoord_2xy : TEXCOORD0, float4 ts_to_view0_2z : TEXCOORD1, float3 ts_to_view1 : TEXCOORD2,
#ifdef NOPERSPECTIVE_SUPPORT
					noperspective float2 screen_tc : TEXCOORD3,
#else
					float3 screen_tc_w : TEXCOORD3,
#endif
					float3 view_dir : TEXCOORD4) : SV_Target
{
#ifndef NOPERSPECTIVE_SUPPORT
	float2 screen_tc = screen_tc_w.xy / screen_tc_w.z;
#endif

	float3 pos_es = view_dir * (opaque_depth_tex.Sample(point_sampler, screen_tc).r / view_dir.z);

	float3 decal_normal = normalize(float3(texcoord_2xy.zw, ts_to_view0_2z.w));
	float3 pixel_normal = GetNormal(g_buffer_rt0_tex.Sample(bilinear_sampler, screen_tc));
	clip(dot(decal_normal, pixel_normal) - NORMAL_THRESHOLD);
	
	float4 decal_pos = mul(float4(pos_es, 1), inv_mv);
	if (any(abs(decal_pos.xyz) > decal_pos.w))
	{
		discard;
	}

	decal_pos /= decal_pos.w;
	texcoord_2xy.xy = float2(decal_pos.x, -decal_pos.y) * 0.5f + 0.5f;

	clip(diffuse_tex.Sample(bilinear_border_sampler, texcoord_2xy.xy).a - ALPHA_TEST_THRESHOLD);

	float3 diffuse;
	if (diffuse_clr.w > 0.5f)
	{
		diffuse = diffuse_tex.Sample(bilinear_border_sampler, texcoord_2xy.xy).rgb;
	}
	else
	{
		diffuse = diffuse_clr.rgb;
	}
	
	float3 specular;
	if (specular_clr.w > 0.5f)
	{
		specular = specular_tex.Sample(aniso_sampler, texcoord_2xy.xy).rgb;
	}
	else
	{
		specular = specular_clr.rgb;
	}

	return StoreGBufferRT1(diffuse, specular);
}

void DecalGBufferAlphaTestMRTPS(float4 texcoord_2xy : TEXCOORD0, float4 ts_to_view0_2z : TEXCOORD1, float3 ts_to_view1 : TEXCOORD2,
#ifdef NOPERSPECTIVE_SUPPORT
					noperspective float2 screen_tc : TEXCOORD3,
#else
					float3 screen_tc_w : TEXCOORD3,
#endif
					float3 view_dir : TEXCOORD4,
					out float4 mrt_0 : SV_Target0, out float4 mrt_1 : SV_Target1)
{
#ifndef NOPERSPECTIVE_SUPPORT
	float2 screen_tc = screen_tc_w.xy / screen_tc_w.z;
#endif

	float3 pos_es = view_dir * (opaque_depth_tex.Sample(point_sampler, screen_tc).r / view_dir.z);
	
	float3 decal_normal = normalize(float3(texcoord_2xy.zw, ts_to_view0_2z.w));
	float3 pixel_normal = GetNormal(g_buffer_rt0_tex.Sample(bilinear_sampler, screen_tc));
	clip(dot(decal_normal, pixel_normal) - NORMAL_THRESHOLD);
	
	float4 decal_pos = mul(float4(pos_es, 1), inv_mv);
	if (any(abs(decal_pos.xyz) > decal_pos.w))
	{
		discard;
	}
	
	decal_pos /= decal_pos.w;
	texcoord_2xy.xy = float2(decal_pos.x, -decal_pos.y) * 0.5f + 0.5f;

	clip(diffuse_tex.Sample(bilinear_border_sampler, texcoord_2xy.xy).a - ALPHA_TEST_THRESHOLD);
		
	float3 normal = RestoreNormal(texcoord_2xy, ts_to_view0_2z, ts_to_view1);

	float3 diffuse;
	if (diffuse_clr.w > 0.5f)
	{
		diffuse = diffuse_tex.Sample(bilinear_border_sampler, texcoord_2xy.xy).rgb;
	}
	else
	{
		diffuse = diffuse_clr.rgb;
	}
	
	float3 specular;
	if (specular_clr.w > 0.5f)
	{
		specular = specular_tex.Sample(aniso_sampler, texcoord_2xy.xy).rgb;
	}
	else
	{
		specular = specular_clr.rgb;
	}
	
	float shininess;
	if (shininess_clr.y > 0.5f)
	{
		shininess = shininess_tex.Sample(aniso_sampler, texcoord_2xy.xy).r;
	}
	else
	{
		shininess = shininess_clr.r;
	}
	
	StoreGBufferMRT(normal, specular, shininess, diffuse,
		mrt_0, mrt_1);
}
		]]>
	</shader>

	<technique name="DepthTech">
		<pass name="p0">
			<state name="cull_mode" value="back"/>

			<state name="vertex_shader" value="DepthVS()"/>
			<state name="pixel_shader" value="DepthPS()"/>
		</pass>
	</technique>
	<technique name="DepthAlphaTestTech" inherit="DepthTech">
		<pass name="p0">
			<state name="pixel_shader" value="DepthAlphaTestPS()"/>
		</pass>
	</technique>
	<technique name="DepthAlphaBlendBackTech">
		<pass name="p0">
			<state name="depth_func" value="greater"/>

			<state name="cull_mode" value="front"/>

			<state name="vertex_shader" value="DepthVS()"/>
			<state name="pixel_shader" value="DepthAlphaBlendPS()"/>
		</pass>
	</technique>
	<technique name="DepthAlphaBlendFrontTech" inherit="DepthAlphaBlendBackTech">
		<pass name="p0">
			<state name="depth_func" value="less"/>

			<state name="cull_mode" value="back"/>
		</pass>
	</technique>

	<technique name="GBufferRT0Tech">
		<pass name="p0">
			<state name="cull_mode" value="back"/>

			<state name="vertex_shader" value="GBufferVS()"/>
			<state name="pixel_shader" value="GBufferRT0PS()"/>
		</pass>
	</technique>
	<technique name="GBufferAlphaTestRT0Tech" inherit="GBufferRT0Tech">
		<pass name="p0">
			<state name="pixel_shader" value="GBufferAlphaTestRT0PS()"/>
		</pass>
	</technique>
	<technique name="GBufferAlphaBlendBackRT0Tech">
		<pass name="p0">
			<state name="depth_func" value="greater"/>
			
			<state name="cull_mode" value="front"/>
			
			<state name="front_stencil_enable" value="true"/>
			<state name="front_stencil_func" value="always_pass"/>
			<state name="front_stencil_ref" value="0"/>
			<state name="front_stencil_pass" value="replace"/>
			<state name="back_stencil_enable" value="true"/>
			<state name="back_stencil_func" value="always_pass"/>
			<state name="back_stencil_ref" value="0"/>
			<state name="back_stencil_pass" value="replace"/>

			<state name="vertex_shader" value="GBufferVS()"/>
			<state name="pixel_shader" value="GBufferAlphaBlendRT0PS()"/>
		</pass>
	</technique>
	<technique name="GBufferAlphaBlendFrontRT0Tech" inherit="GBufferAlphaBlendBackRT0Tech">
		<pass name="p0">
			<state name="depth_func" value="less"/>
			
			<state name="cull_mode" value="back"/>
		</pass>
	</technique>

	<technique name="GBufferRT1Tech">
		<pass name="p0">
			<state name="cull_mode" value="back"/>
			<state name="depth_func" value="equal"/>

			<state name="vertex_shader" value="GBufferVS()"/>
			<state name="pixel_shader" value="GBufferRT1PS()"/>
		</pass>
	</technique>
	<technique name="GBufferAlphaTestRT1Tech" inherit="GBufferRT1Tech">
		<pass name="p0">
			<state name="pixel_shader" value="GBufferAlphaTestRT1PS()"/>
		</pass>
	</technique>
	<technique name="GBufferAlphaBlendBackRT1Tech">
		<pass name="p0">
			<state name="depth_func" value="equal"/>

			<state name="cull_mode" value="front"/>
			
			<state name="front_stencil_enable" value="true"/>
			<state name="front_stencil_func" value="not_equal"/>
			<state name="front_stencil_ref" value="128"/>
			<state name="front_stencil_pass" value="keep"/>
			<state name="back_stencil_enable" value="true"/>
			<state name="back_stencil_func" value="not_equal"/>
			<state name="back_stencil_ref" value="128"/>
			<state name="back_stencil_pass" value="keep"/>

			<state name="vertex_shader" value="GBufferVS()"/>
			<state name="pixel_shader" value="GBufferAlphaBlendRT1PS()"/>
		</pass>
	</technique>
	<technique name="GBufferAlphaBlendFrontRT1Tech" inherit="GBufferAlphaBlendBackRT1Tech">
		<pass name="p0">
			<state name="depth_func" value="equal"/>

			<state name="cull_mode" value="back"/>
		</pass>
	</technique>

	<technique name="GBufferMRTTech">
		<pass name="p0">
			<state name="cull_mode" value="back"/>

			<state name="vertex_shader" value="GBufferVS()"/>
			<state name="pixel_shader" value="GBufferMRTPS()"/>
		</pass>
	</technique>
	<technique name="GBufferAlphaTestMRTTech" inherit="GBufferMRTTech">
		<pass name="p0">
			<state name="pixel_shader" value="GBufferAlphaTestMRTPS()"/>
		</pass>
	</technique>
	<technique name="GBufferAlphaBlendBackMRTTech">
		<pass name="p0">
			<state name="depth_func" value="greater"/>
			
			<state name="cull_mode" value="front"/>

			<state name="front_stencil_enable" value="true"/>
			<state name="front_stencil_func" value="always_pass"/>
			<state name="front_stencil_ref" value="0"/>
			<state name="front_stencil_pass" value="replace"/>
			<state name="back_stencil_enable" value="true"/>
			<state name="back_stencil_func" value="always_pass"/>
			<state name="back_stencil_ref" value="0"/>
			<state name="back_stencil_pass" value="replace"/>

			<state name="vertex_shader" value="GBufferVS()"/>
			<state name="pixel_shader" value="GBufferAlphaBlendMRTPS()"/>
		</pass>
	</technique>
	<technique name="GBufferAlphaBlendFrontMRTTech" inherit="GBufferAlphaBlendBackMRTTech">
		<pass name="p0">
			<state name="depth_func" value="less"/>
			
			<state name="cull_mode" value="back"/>
		</pass>
	</technique>

	<technique name="DecalGBufferAlphaTestRT0Tech" inherit="GBufferAlphaTestRT0Tech">
		<pass name="p0">
			<state name="depth_write_mask" value="0"/>

			<state name="vertex_shader" value="DecalGBufferVS()"/>
			<state name="pixel_shader" value="DecalGBufferAlphaTestRT0PS()"/>
		</pass>
	</technique>

	<technique name="DecalGBufferAlphaTestRT1Tech" inherit="DecalGBufferAlphaTestRT0Tech">
		<pass name="p0">
			<state name="pixel_shader" value="DecalGBufferAlphaTestRT1PS()"/>
		</pass>
	</technique>

	<technique name="DecalGBufferAlphaTestMRTTech" inherit="DecalGBufferAlphaTestRT0Tech">
		<pass name="p0">
			<state name="pixel_shader" value="DecalGBufferAlphaTestMRTPS()"/>
		</pass>
	</technique>

	<shader>
		<![CDATA[
void GenReflectiveShadowMapVS(float4 pos : POSITION,
						float2 texcoord : TEXCOORD0,
						float4 tangent_quat : TANGENT,
						out float4 oTexCoord_2xy : TEXCOORD0,
						out float4 oTsToView0_2z : TEXCOORD1,
						out float3 oTsToView1 : TEXCOORD2,
						out float4 oPos : SV_Position)
{
	pos = float4(pos.xyz * pos_extent + pos_center, 1);
	texcoord = texcoord * tc_extent + tc_center;
	
	oPos = mul(pos, mvp);
	oTexCoord_2xy.xy = texcoord;

	tangent_quat = tangent_quat * 2 - 1;

	float3x3 obj_to_ts;
	obj_to_ts[0] = transform_quat(float3(1, 0, 0), tangent_quat);
	obj_to_ts[1] = transform_quat(float3(0, 1, 0), tangent_quat) * sign(tangent_quat.w);
	obj_to_ts[2] = transform_quat(float3(0, 0, 1), tangent_quat);
	float3x3 ts_to_view = mul(obj_to_ts, (float3x3)model_view);
	oTsToView0_2z.xyz = ts_to_view[0];
	oTsToView1 = ts_to_view[1];
	oTexCoord_2xy.zw = ts_to_view[2].xy;
	oTsToView0_2z.w = ts_to_view[2].z;
}

void ConstructRSMBuffer(float4 texcoord_2xy, float4 ts_to_view0_2z, float3 ts_to_view1,
						out float4 oAlbedo, out float4 oNormal)
{
	float3 diffuse;
	if (diffuse_clr.w > 0.5f)
	{
		diffuse = diffuse_tex.Sample(aniso_sampler, texcoord_2xy.xy).xyz;
	}
	else
	{
		diffuse = diffuse_clr.xyz;
	}
	float3 specular;
	if (specular_clr.w > 0.5f)
	{
		specular = specular_tex.Sample(aniso_sampler, texcoord_2xy.xy).rgb;
	}
	else
	{
		specular = specular_clr.rgb;
	}
	oAlbedo = StoreGBufferRT1(diffuse, specular);

	float3 normal = normalize(float3(texcoord_2xy.zw, ts_to_view0_2z.w));
	if (normal_map_enabled)
	{
		float3x3 ts_to_view;
		ts_to_view[0] = normalize(ts_to_view0_2z.xyz);
		ts_to_view[1] = normalize(ts_to_view1);
		ts_to_view[2] = normal;
		normal = normalize(mul(decompress_normal(normal_tex.Sample(trilinear_sampler, texcoord_2xy.xy)), ts_to_view));
	}
	
	float shininess;
	if (shininess_clr.y > 0.5f)
	{
		shininess = shininess_tex.Sample(aniso_sampler, texcoord_2xy.xy).r;
	}
	else
	{
		shininess = shininess_clr.r;
	}

	oNormal = float4(normal / 2 + 0.5f, shininess);
}

void GenReflectiveShadowMapPS(float4 texcoord_2xy : TEXCOORD0, float4 ts_to_view0_2z : TEXCOORD1, float3 ts_to_view1 : TEXCOORD2,
						out float4 oAlbedo : SV_Target0, 
						out float4 oNormal : SV_Target1)
{
	ConstructRSMBuffer(texcoord_2xy, ts_to_view0_2z, ts_to_view1, oAlbedo, oNormal);
}

void GenReflectiveShadowMapAlphaTestPS(float4 texcoord_2xy : TEXCOORD0, float4 ts_to_view0_2z : TEXCOORD1, float3 ts_to_view1 : TEXCOORD2,
						out float4 oAlbedo : SV_Target0, 
						out float4 oNormal : SV_Target1)
{
	clip(diffuse_tex.Sample(bilinear_sampler, texcoord_2xy.xy).a - ALPHA_TEST_THRESHOLD);
	ConstructRSMBuffer(texcoord_2xy, ts_to_view0_2z, ts_to_view1, oAlbedo, oNormal);
}
		]]>
	</shader>

	<technique name="GenReflectiveShadowMapTech">
		<pass name="p0">
			<state name="cull_mode" value="back"/>

			<state name="vertex_shader" value="GenReflectiveShadowMapVS()"/>
			<state name="pixel_shader" value="GenReflectiveShadowMapPS()"/>
		</pass>
	</technique>

	<technique name="GenReflectiveShadowMapAlphaTestTech" inherit="GenReflectiveShadowMapTech">
		<pass name="p0">
			<state name="pixel_shader" value="GenReflectiveShadowMapAlphaTestPS()"/>
		</pass>
	</technique>

	<shader>
		<![CDATA[
void GenShadowMapVS(float4 pos : POSITION,
						float2 texcoord : TEXCOORD0,
						out float2 oTc : TEXCOORD0,
						out float4 oPos : SV_Position)
{
	pos = float4(pos.xyz * pos_extent + pos_center, 1);
	texcoord = texcoord * tc_extent + tc_center;

	oPos = mul(pos, mvp);
	oTc = texcoord;
}

float4 GenShadowMapPS(float2 tc : TEXCOORD0) : SV_Target
{
	return 0;
}

float4 GenShadowMapAlphaTestPS(float2 tc : TEXCOORD0) : SV_Target
{
	clip(diffuse_tex.Sample(bilinear_sampler, tc).a - ALPHA_TEST_THRESHOLD);
	return 0;
}

void GenShadowMapWODepthTextureVS(float4 pos : POSITION,
						float2 texcoord : TEXCOORD0,
						out float2 oTc : TEXCOORD0,
						out float3 oViewDir : TEXCOORD1,
						out float4 oPos : SV_Position)
{
	pos = float4(pos.xyz * pos_extent + pos_center, 1);
	texcoord = texcoord * tc_extent + tc_center;

	oPos = mul(pos, mvp);
	oTc = texcoord;

	oViewDir = mul(pos, model_view).xyz;
}

float4 GenShadowMapWODepthTexturePS(float2 tc : TEXCOORD0, float3 view_dir : TEXCOORD1) : SV_Target
{
	return length(view_dir);
}

float4 GenShadowMapWODepthTextureAlphaTestPS(float2 tc : TEXCOORD0, float3 view_dir : TEXCOORD1) : SV_Target
{
	clip(diffuse_tex.Sample(bilinear_sampler, tc).a - ALPHA_TEST_THRESHOLD);
	
	return length(view_dir);
}

void GenCascadedShadowMapVS(float4 pos : POSITION,
						float2 texcoord : TEXCOORD0,
						out float2 oTc : TEXCOORD0,
						out float oDepth : TEXCOORD1,
						out float4 oPos : SV_Position)
{
	pos = float4(pos.xyz * pos_extent + pos_center, 1);
	texcoord = texcoord * tc_extent + tc_center;
	
	oPos = mul(pos, mvp);
	oTc = texcoord;

	oDepth = mul(pos, model_view).z;
}

float4 GenCascadedShadowMapPS(float2 tc : TEXCOORD0, float depth : TEXCOORD1) : SV_Target
{
	return depth;
}

float4 GenCascadedShadowMapAlphaTestPS(float2 tc : TEXCOORD0, float depth : TEXCOORD1) : SV_Target
{
	clip(diffuse_tex.Sample(bilinear_sampler, tc).a - ALPHA_TEST_THRESHOLD);

	return depth;
}
		]]>
	</shader>

	<technique name="GenShadowMapTech">
		<pass name="p0">
			<state name="cull_mode" value="none"/>
			<state name="color_write_mask" value="0"/>
			
			<state name="vertex_shader" value="GenShadowMapVS()"/>
			<state name="pixel_shader" value="GenShadowMapPS()"/>
		</pass>
	</technique>
	<technique name="GenShadowMapAlphaTestTech" inherit="GenShadowMapTech">
		<pass name="p0">
			<state name="pixel_shader" value="GenShadowMapAlphaTestPS()"/>
		</pass>
	</technique>
	
	<technique name="GenShadowMapWODepthTextureTech">
		<pass name="p0">
			<state name="cull_mode" value="none"/>

			<state name="vertex_shader" value="GenShadowMapWODepthTextureVS()"/>
			<state name="pixel_shader" value="GenShadowMapWODepthTexturePS()"/>
		</pass>
	</technique>
	<technique name="GenShadowMapWODepthTextureAlphaTestTech" inherit="GenShadowMapWODepthTextureTech">
		<pass name="p0">
			<state name="pixel_shader" value="GenShadowMapWODepthTextureAlphaTestPS()"/>
		</pass>
	</technique>

	<technique name="GenCascadedShadowMapTech">
		<pass name="p0">
			<state name="cull_mode" value="none"/>
			<state name="depth_clip_enable" value="false"/>

			<state name="vertex_shader" value="GenCascadedShadowMapVS()"/>
			<state name="pixel_shader" value="GenCascadedShadowMapPS()"/>
		</pass>
	</technique>
	<technique name="GenCascadedShadowMapAlphaTestTech" inherit="GenCascadedShadowMapTech">
		<pass name="p0">
			<state name="pixel_shader" value="GenCascadedShadowMapAlphaTestPS()"/>
		</pass>
	</technique>


	<shader>
		<![CDATA[
void SpecialShadingVS(float4 pos : POSITION,
			float2 texcoord : TEXCOORD0,
			out float2 oTexCoord : TEXCOORD0,
			out float4 oPos : SV_Position)
{
	pos = float4(pos.xyz * pos_extent + pos_center, 1);
	texcoord = texcoord * tc_extent + tc_center;
	
	oPos = mul(pos, mvp);
	oTexCoord = texcoord;
}

float4 SpecialShadingPS(float2 texcoord : TEXCOORD0) : SV_Target
{
	float3 emit;
	if (emit_clr.w > 0.5f)
	{
		emit = emit_tex.Sample(aniso_sampler, texcoord).rgb * 16;
	}
	else
	{
		emit = emit_clr.rgb;
	}
	return float4(max(emit, 0), 1);
}

float4 SpecialShadingAlphaBlendPS(float2 texcoord : TEXCOORD0) : SV_Target
{
	float3 emit;
	if (emit_clr.w > 0.5f)
	{
		emit = emit_tex.Sample(aniso_sampler, texcoord).rgb * 16;
	}
	else
	{
		emit = emit_clr.rgb;
	}
	float opacity;
	if (opacity_map_enabled)
	{
		opacity = diffuse_tex.Sample(aniso_sampler, texcoord).a;
	}
	else
	{
		opacity = opacity_clr;
	}
	return float4(max(emit, 0), opacity);
}
		]]>
	</shader>

	<technique name="SpecialShadingTech">
		<pass name="p0">
			<state name="cull_mode" value="back"/>
			<state name="depth_enable" value="true"/>
			<state name="depth_func" value="equal"/>
			<state name="depth_write_mask" value="false"/>

			<state name="blend_enable" value="true"/>
			<state name="blend_op" value="add"/>
			<state name="src_blend" value="one"/>
			<state name="dest_blend" value="one"/>
			<state name="blend_op_alpha" value="add"/>
			<state name="src_blend_alpha" value="src_alpha"/>
			<state name="dest_blend_alpha" value="zero"/>

			<state name="vertex_shader" value="SpecialShadingVS()"/>
			<state name="pixel_shader" value="SpecialShadingPS()"/>
		</pass>
	</technique>
	<technique name="SpecialShadingAlphaBlendBackTech" inherit="SpecialShadingTech">
		<pass name="p0">
			<state name="cull_mode" value="front"/>

			<state name="pixel_shader" value="SpecialShadingAlphaBlendPS()"/>
		</pass>
	</technique>
	<technique name="SpecialShadingAlphaBlendFrontTech" inherit="SpecialShadingAlphaBlendBackTech">
		<pass name="p0">
			<state name="cull_mode" value="back"/>
		</pass>
	</technique>
</effect>
