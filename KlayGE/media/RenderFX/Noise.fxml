<?xml version='1.0'?>

<effect>
	<parameter type="texture2D" name="simplex_tex">
		<annotation type="string" name="SasResourceAddress" value="noise_simplex.dds"/>
	</parameter>
	<parameter type="texture2D" name="grad3_perm_tex">
		<annotation type="string" name="SasResourceAddress" value="noise_grad3_perm.dds"/>
	</parameter>
	<parameter type="texture2D" name="grad4_perm_tex">
		<annotation type="string" name="SasResourceAddress" value="noise_grad4_perm.dds"/>
	</parameter>

	<parameter type="sampler" name="noise_point_sampler">
		<state name="filtering" value="min_mag_mip_point"/>
		<state name="address_u" value="wrap"/>
		<state name="address_v" value="wrap"/>
	</parameter>

	<shader>
		<![CDATA[
float perm2d(float2 xy)
{
	return grad3_perm_tex.SampleLevel(noise_point_sampler, (xy + 0.5f) / 256, 0).w * 255;
}

float perm(float x)
{
	return perm2d(float2(x, 36));
}

float3 grad3_perm(float2 xy)
{
	return grad3_perm_tex.SampleLevel(noise_point_sampler, (xy + 0.5f) / 256, 0).xyz * 2 - 1;
}

float4 grad4_perm(float2 xy)
{
	return grad4_perm_tex.SampleLevel(noise_point_sampler, (xy + 0.5f) / 256, 0) * 2 - 1;
}

float4 simplex(float x)
{
	return simplex_tex.SampleLevel(noise_point_sampler, float2((x + 0.5f) / 64, 0.5f), 0) * 255;
}

float simplex_noise(float2 p)
{
	const float F2 = 0.366025403784f;//(sqrt(3) - 1) / 2
	const float G2 = 0.211324865405f;//(3 - sqrt(3)) / 6

	float s = (p.x + p.y) * F2;
	float2 pi = floor(p + s);
	float t = (pi.x + pi.y) * G2; 
	float2 p0 = pi - t;
	float2 pf0 = p - p0;
	
	float2 o1;
	if (pf0.x >= pf0.y)
	{
		o1 = float2(1, 0);
	}
	else
	{
		o1 = float2(0, 1);
	}
	
	float n = 0;

	float t0 = 0.5f - dot(pf0, pf0);
	if (t0 > 0)
	{
		t0 *= t0;
		n += t0 * t0 * dot(grad3_perm(pi).xy, pf0);
	}
	float2 pf1 = pf0 - o1 + G2;
	float t1 = 0.5f - dot(pf1, pf1);
	if (t1 > 0)
	{
		t1 *= t1;
		n += t1 * t1 * dot(grad3_perm(pi + o1).xy, pf1);
	}
	float2 pf2 = pf0 - 1 + 2 * G2;
	float t2 = 0.5f - dot(pf2, pf2);
	if (t2 > 0)
	{
		t2 *= t2;
		n += t2 * t2 * dot(grad3_perm(pi + 1).xy, pf2);
	}
	
	return 70 * n;
}

float simplex_noise(float3 p)
{
	const float F3 = 1 / 3.0f;
	const float G3 = 1 / 6.0f;

	float s = (p.x + p.y + p.z) * F3;
	float3 pi = floor(p + s);
	float t = (pi.x + pi.y + pi.z) * G3; 
	float3 p0 = pi - t;
	float3 pf0 = p - p0;

	float3 o1, o2;
	if (pf0.x >= pf0.y)
	{
		if (pf0.y >= pf0.z)
		{
			// X Y Z order
			o1 = float3(1, 0, 0);
			o2 = float3(1, 1, 0);
		}
		else if (pf0.x >= pf0.z)
		{
			// X Z Y order
			o1 = float3(1, 0, 0);
			o2 = float3(1, 0, 1);
		}
		else
		{
			// Z X Y order
			o1 = float3(0, 0, 1);
			o2 = float3(1, 0, 1);
		}
	}
	else
	{
		if (pf0.y < pf0.z)
		{
			// Z Y X order
			o1 = float3(0, 0, 1);
			o2 = float3(0, 1, 1);
		}
		else if (pf0.x < pf0.z)
		{
			// Y Z X order
			o1 = float3(0, 1, 0);
			o2 = float3(0, 1, 1);
		}
		else
		{
			// Y X Z order
			o1 = float3(0, 1, 0);
			o2 = float3(1, 1, 0);
		}
	}

	float n = 0;

	float t0 = 0.6f - dot(pf0, pf0);
	if (t0 > 0)
	{
		t0 *= t0;
		n += t0 * t0 * dot(grad3_perm(float2(pi.x, pi.y + perm(pi.z))), pf0);
	}
	float3 pf1 = pf0 - o1 + G3;
	float t1 = 0.6f - dot(pf1, pf1);
	if (t1 > 0)
	{
		t1 *= t1;
		n += t1 * t1 * dot(grad3_perm(pi.xy + o1.xy + float2(0, perm(pi.z + o1.z))), pf1);
	}
	float3 pf2 = pf0 - o2 + 2 * G3;
	float t2 = 0.6f - dot(pf2, pf2);
	if (t2 > 0)
	{
		t2 *= t2;
		n += t2 * t2 * dot(grad3_perm(pi.xy + o2.xy + float2(0, perm(pi.z + o2.z))), pf2);
	}
	float3 pf3 = pf0 - 1 + 3 * G3;
	float t3 = 0.6f - dot(pf3, pf3);
	if (t3 > 0)
	{
		t3 *= t3;
		n += t3 * t3 * dot(grad3_perm(pi.xy + 1 + float2(0, perm(pi.z + 1))), pf3);
	}

	return 32 * n;
}

float simplex_noise(float4 p)
{
	const float F4 = 0.309016994375f;//(sqrt(5) - 1) / 4
	const float G4 = 0.138196601125f;//(5 - sqrt(5)) / 20
	
	float s = (p.x + p.y + p.z + p.w) * F4;
	float4 pi = floor(p + s);
	float t = (pi.x + pi.y + pi.z + pi.w) * G4; 
	float4 p0 = pi - t;
	float4 pf0 = p - p0;

	float c = 0;
	c += (pf0.x > pf0.y) * 32;
	c += (pf0.x > pf0.z) * 16;
	c += (pf0.y > pf0.z) * 8;
	c += (pf0.x > pf0.w) * 4;
	c += (pf0.y > pf0.w) * 2;
	c += (pf0.z > pf0.w) * 1;
	
	float4 sim = simplex(c);
	float4 o1 = sim >= 3;
	float4 o2 = sim >= 2;
	float4 o3 = sim >= 1;

	float n = 0;

	float t0 = 0.6f - dot(pf0, pf0);
	if (t0 > 0)
	{
		t0 *= t0;
		n += t0 * t0 * dot(grad4_perm(pi.xy + float2(0, perm2d(pi.zw))), pf0);
	}
	float4 pf1 = pf0 - o1 + G4;
	float t1 = 0.6f - dot(pf1, pf1);
	if (t1 > 0)
	{
		t1 *= t1;
		n += t1 * t1 * dot(grad4_perm(pi.xy + o1.xy + float2(0, perm2d(pi.zw + o1.zw))), pf1);
	}
	float4 pf2 = pf0 - o2 + 2 * G4;
	float t2 = 0.6f - dot(pf2, pf2);
	if (t2 > 0)
	{
		t2 *= t2;
		n += t2 * t2 * dot(grad4_perm(pi.xy + o2.xy + float2(0, perm2d(pi.zw + o2.zw))), pf2);
	}
	float4 pf3 = pf0 - o3 + 3 * G4;
	float t3 = 0.6f - dot(pf3, pf3);
	if (t3 > 0)
	{
		t3 *= t3;
		n += t3 * t3 * dot(grad4_perm(pi.xy + o3.xy + float2(0, perm2d(pi.zw + o3.zw))), pf3);
	}
	float4 pf4 = pf0 - 1 + 4 * G4;
	float t4 = 0.6f - dot(pf4, pf4);
	if (t4 > 0)
	{
		t4 *= t4;
		n += t4 * t4 * dot(grad4_perm(pi.xy + 1 + float2(0, perm2d(pi.zw + 1))), pf4);
	}

	return 27 * n;
}

// calculate gradient of noise (expensive!)
float3 simplex_noise_gradient(float3 p, float d)
{
	float f0 = simplex_noise(p);
	float fx = simplex_noise(p + float3(d, 0, 0));
	float fy = simplex_noise(p + float3(0, d, 0));
	float fz = simplex_noise(p + float3(0, 0, d));
	return float3(fx - f0, fy - f0, fz - f0) / d;
}

// fractal sum
float fBm(float2 p, int octaves, float lacunarity = 2.0f, float gain = 0.5f)
{
	float sum = 0;
	float amp = 1;
	float amp_sum = 0;
	for (int i = 0; i < octaves; ++ i)
	{
		sum += simplex_noise(p) * amp;
		amp_sum += amp;
		p *= lacunarity;
		amp *= gain;
	}
	return sum / amp_sum;
}

float fBm(float3 p, int octaves, float lacunarity = 2.0f, float gain = 0.5f)
{
	float sum = 0;
	float amp = 1;
	float amp_sum = 0;
	for (int i = 0; i < octaves; ++ i)
	{
		sum += simplex_noise(p) * amp;
		amp_sum += amp;
		p *= lacunarity;
		amp *= gain;
	}
	return sum / amp_sum;
}

float fBm(float4 p, int octaves, float lacunarity = 2.0f, float gain = 0.5f)
{
	float sum = 0;
	float amp = 1;
	float amp_sum = 0;
	for (int i = 0; i < octaves; ++ i)
	{
		sum += simplex_noise(p) * amp;
		amp_sum += amp;
		p *= lacunarity;
		amp *= gain;
	}
	return sum / amp_sum;
}

float turbulence(float2 p, int octaves, float lacunarity = 2.0f, float gain = 0.5f)
{
	float sum = 0;
	float amp = 1;
	float amp_sum = 0;
	for (int i = 0; i < octaves; ++ i)
	{
		sum += abs(simplex_noise(p)) * amp;
		amp_sum += amp;
		p *= lacunarity;
		amp *= gain;
	}
	return sum / amp_sum;
}

float turbulence(float3 p, int octaves, float lacunarity = 2.0f, float gain = 0.5f)
{
	float sum = 0;
	float amp = 1;
	float amp_sum = 0;
	for (int i = 0; i < octaves; ++ i)
	{
		sum += abs(simplex_noise(p)) * amp;
		amp_sum += amp;
		p *= lacunarity;
		amp *= gain;
	}
	return sum / amp_sum;
}

float turbulence(float4 p, int octaves, float lacunarity = 2.0f, float gain = 0.5f)
{
	float sum = 0;
	float amp = 1;
	float amp_sum = 0;
	for (int i = 0; i < octaves; ++ i)
	{
		sum += abs(simplex_noise(p)) * amp;
		amp_sum += amp;
		p *= lacunarity;
		amp *= gain;
	}
	return sum / amp_sum;
}

// Ridged multifractal
// See "Texturing & Modeling, A Procedural Approach", Chapter 12
float ridge(float h, float offset)
{
    h = abs(h);
    h = offset - h;
    h = h * h;
    return h;
}

float ridgedmf(float2 p, int octaves, float lacunarity = 2.0f, float gain = 0.5f, float offset = 1.0f)
{
	float sum = 0;
	float amp = 1;
	float amp_sum = 0;
	float prev = 1;
	for (int i = 0; i < octaves; ++ i)
	{
		float n = ridge(simplex_noise(p), offset);
		sum += n * amp * prev;
		amp_sum += amp * prev;
		prev = n;
		p *= lacunarity;
		amp *= gain;
	}
	return sum / amp_sum;
}

float ridgedmf(float3 p, int octaves, float lacunarity = 2.0f, float gain = 0.5f, float offset = 1.0f)
{
	float sum = 0;
	float amp = 1;
	float amp_sum = 0;
	float prev = 1;
	for (int i = 0; i < octaves; ++ i)
	{
		float n = ridge(simplex_noise(p), offset);
		sum += n * amp * prev;
		amp_sum += amp * prev;
		prev = n;
		p *= lacunarity;
		amp *= gain;
	}
	return sum / amp_sum;
}

float ridgedmf(float4 p, int octaves, float lacunarity = 2.0f, float gain = 0.5f, float offset = 1.0f)
{
	float sum = 0;
	float amp = 1;
	float amp_sum = 0;
	float prev = 1;
	for (int i = 0; i < octaves; ++ i)
	{
		float n = ridge(simplex_noise(p), offset);
		sum += n * amp * prev;
		amp_sum += amp * prev;
		prev = n;
		p *= lacunarity;
		amp *= gain;
	}
	return sum / amp_sum;
}
		]]>
	</shader>
</effect>
