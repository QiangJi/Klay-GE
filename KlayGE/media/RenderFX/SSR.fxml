<?xml version='1.0'?>

<effect>
	<include name="Lighting.fxml"/>
	<include name="PostProcess.fxml"/>
	<include name="DeferredRenderingUtil.fxml"/>
	<include name="util.fxml"/>

	<cbuffer name="per_frame">
		<parameter type="float4x4" name="proj"/>
		<parameter type="float4x4" name="inv_proj"/>
		<parameter type="float3" name="near_q_far"/>
		<parameter type="float" name="ray_length"/>
	</cbuffer>

	<cbuffer name="pp_params">
		<parameter type="int" name="min_samples"/>
		<parameter type="int" name="max_samples"/>
	</cbuffer>
	
	<parameter type="texture2D" name="g_buffer_0_tex"/>
	<parameter type="texture2D" name="g_buffer_1_tex"/>
	<parameter type="texture2D" name="front_side_depth_tex"/>
	<parameter type="texture2D" name="front_side_tex"/>
	<parameter type="texture2D" name="back_side_depth_tex"/>
	<parameter type="texture2D" name="back_side_tex"/>
	<parameter type="texture2D" name="foreground_depth_tex"/>

	<parameter type="sampler" name="ssr_linear_sampler">
		<state name="filtering" value="min_mag_linear_mip_point"/>
		<state name="address_u" value="clamp"/>
		<state name="address_v" value="clamp"/>
	</parameter>

	<parameter type="sampler" name="ssr_point_sampler">
		<state name="filtering" value="min_mag_mip_point"/>
		<state name="address_u" value="clamp"/>
		<state name="address_v" value="clamp"/>
	</parameter>

	<shader>
		<![CDATA[
float4 CalcSSR(float2 tc, float3 normal, float3 pos_es, float3 indicent_es, bool front_side, bool strictness)
{
	normal = normalize(normal); // eye space normal 
	float3 view_dir = normalize(pos_es); // eye space view direction
	
	float linear_depth = pos_es.z;
	float non_linear_depth = linear_depth_to_non_linear(linear_depth, near_q_far.x, near_q_far.y);
	float3 tex_pos = float3(tc, non_linear_depth); // let z component be projected nonlinear depth, so we can do linear interpolation in screen space

	float3 reflect_vec = normalize(reflect(indicent_es, normal)); // eye space reflect vector
	float4 proj_ray_end = mul(float4(pos_es + reflect_vec * ray_length, 1), proj);
	proj_ray_end.xyz /= proj_ray_end.w;
	float3 tex_reflect_pos = float3(TexCoordFromPos(proj_ray_end), proj_ray_end.z);
	float3 tex_reflect_vec = tex_reflect_pos - tex_pos;
	
	// the reflect vector completely perpendiculars to screen
	if (!any(tex_reflect_vec.xy))
	{
		return 0;
	}

	// try to compute the intersection point of reflection vector and screen edge
	float t1 = 1;
	if (tex_reflect_pos.x < 0)
	{
		t1 = -tex_pos.x / tex_reflect_vec.x;
	}
	else if (tex_reflect_pos.x > 1)
	{
		t1 = (1 - tex_pos.x) / tex_reflect_vec.x;
	}

	float t2 = 1;
	if (tex_reflect_pos.y < 0)
	{
		t2 = -tex_pos.y / tex_reflect_vec.y;
	}
	else if (tex_reflect_pos.y > 1)
	{
		t2 = (1 - tex_pos.y) / tex_reflect_vec.y;
	}

	float3 tex_offset = min(t1, t2) * tex_reflect_vec;
	
	float orientation_factor = dot(reflect_vec, float3(0, 0, 1));
	int num_steps = (int)lerp(max_samples, min_samples, abs(orientation_factor));

	float step = 1.0f / num_steps;
	float3 sample_step = tex_offset * step;

	int sample_index = 0;
	float3 cur_tex_pos = tex_pos;

	float t = 0;
	float2 pt1 = float2(linear_depth, linear_depth);
	float2 pt2 = float2(linear_depth, linear_depth);

	while (sample_index < num_steps)
	{
		cur_tex_pos += sample_step;
		float cur_sample_depth;
		if (front_side)
		{
			cur_sample_depth = front_side_depth_tex.SampleLevel(ssr_linear_sampler, cur_tex_pos.xy, 0).r;
		}
		else
		{
			cur_sample_depth = back_side_depth_tex.SampleLevel(ssr_linear_sampler, cur_tex_pos.xy, 0).r;
		}
		float cur_ray_march_depth = non_linear_depth_to_linear(cur_tex_pos.z, near_q_far.x, near_q_far.y);
	
		t += step;
		
		if (cur_ray_march_depth > cur_sample_depth)
		{
			sample_index = num_steps;
			pt2 = float2(cur_sample_depth, cur_ray_march_depth);
		}
		else
		{
			++ sample_index;
			pt1 = float2(cur_sample_depth, cur_ray_march_depth);
		}
	}

	float delta1 = pt1.x - pt1.y;
	float delta2 = pt2.x - pt2.y;
	float delta = delta1 - delta2;

	float3 sample_tex_pos;
	if (delta2 == 0)
	{
		sample_tex_pos = tex_pos + tex_offset;
	}
	else
	{
		t = (delta1 * t - delta2 * (t - step)) / delta;
		sample_tex_pos = tex_pos + t * tex_offset;
	}

	float sample_z;
	if (front_side)
	{
		sample_z = front_side_depth_tex.SampleLevel(ssr_linear_sampler, sample_tex_pos.xy, 0).r;
	}
	else
	{
		sample_z = back_side_depth_tex.SampleLevel(ssr_linear_sampler, sample_tex_pos.xy, 0).r;
	}

	float4 ret;
	if (!strictness || ((sample_z < near_q_far.z - 1e-6f)
		&& (abs(sample_z - non_linear_depth_to_linear(sample_tex_pos.z, near_q_far.x, near_q_far.y)) < 0.1f)))
	{
		float reflect_dir_fade_out_factor = 1 - orientation_factor;
		float screen_edge_fade_out_factor = saturate((distance(sample_tex_pos.xy, 0.5f) - 0.4f) * 3);

		float3 clr;
		if (front_side)
		{
			clr = front_side_tex.Sample(ssr_linear_sampler, sample_tex_pos.xy).rgb;
		}
		else
		{
			clr = back_side_tex.Sample(ssr_linear_sampler, sample_tex_pos.xy).rgb;
		}
		float alpha = 1 - max(screen_edge_fade_out_factor, reflect_dir_fade_out_factor);

		ret = float4(clr, alpha);
	}
	else
	{
		ret = 0;
	}
	
	return ret;
}

void ScreenSpaceReflectionPostProcessVS(float4 pos : POSITION,
				out float2 oTc0 : TEXCOORD0,
				out float3 oViewDir : TEXCOORD1,
				out float4 oPos : SV_Position)
{
	PostProcessVS(pos, oTc0, oPos);
	oViewDir = mul(oPos, inv_proj).xyz;
}

float4 ScreenSpaceReflectionPostProcessPS(float2 tc : TEXCOORD0, float3 view_dir : TEXCOORD1) : SV_Target
{
	float3 pos_es = view_dir * (foreground_depth_tex.Sample(ssr_point_sampler, tc).x / view_dir.z);
	float3 normal = GetNormal(g_buffer_0_tex.Sample(ssr_linear_sampler, tc));
	float4 clr = CalcSSR(tc, normal, pos_es, pos_es, 1, 0);
	float fresnel = fresnel_term_schlick(-view_dir, normal, g_buffer_1_tex.Sample(ssr_linear_sampler, tc).w).x;
	return float4(clr.xyz, saturate(clr.w * fresnel));
}
		]]>
	</shader>

	<technique name="ScreenSpaceReflectionPostProcess">
		<pass name="p0">
			<state name="cull_mode" value="back"/>
			<state name="depth_enable" value="false"/>
			<state name="depth_write_mask" value="false"/>

			<state name="front_stencil_enable" value="true"/>
			<state name="front_stencil_func" value="equal"/>
			<state name="front_stencil_ref" value="64"/>
			<state name="front_stencil_pass" value="keep"/>
			<state name="front_stencil_read_mask" value="192"/>
			<state name="front_stencil_write_mask" value="0"/>
			<state name="back_stencil_enable" value="true"/>
			<state name="back_stencil_func" value="equal"/>
			<state name="back_stencil_ref" value="64"/>
			<state name="back_stencil_pass" value="keep"/>
			<state name="back_stencil_read_mask" value="192"/>
			<state name="back_stencil_write_mask" value="0"/>

			<state name="blend_enable" value="true"/>
			<state name="blend_op" value="add"/>
			<state name="src_blend" value="src_alpha"/>
			<state name="dest_blend" value="one"/>
			<state name="blend_op_alpha" value="add"/>
			<state name="src_blend_alpha" value="zero"/>
			<state name="dest_blend_alpha" value="one"/>

			<state name="vertex_shader" value="ScreenSpaceReflectionPostProcessVS()"/>
			<state name="pixel_shader" value="ScreenSpaceReflectionPostProcessPS()"/>
		</pass>
	</technique>
</effect>
