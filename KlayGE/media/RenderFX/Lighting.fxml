<?xml version='1.0'?>

<effect>
	<shader>
		<![CDATA[
float directional_lighting(float3 light_dir, float3 normal)
{
	return dot(-light_dir, normal);
}

float point_lighting(float3 light_pos, float3 pos, float3 normal)
{
	return dot(normalize(light_pos - pos), normal);
}

float spot_lighting(float3 light_pos, float3 light_dir, float2 cos_cone, float3 pos)
{
	// cos_cone is (cos_outer_cone, cos_inner_cone)
	
	float3 v = normalize(pos - light_pos);
	float cos_direction = dot(v, light_dir);

	return smoothstep(cos_cone.x, cos_cone.y, cos_direction);
}


float3 fresnel_term_schlick(float3 light_vec, float3 halfway_vec, float3 c_spec)
{
	float e_n = saturate(dot(light_vec, halfway_vec));
	return c_spec + (1 - c_spec) * exp2(-(5.55473f * e_n + 6.98316f) * e_n);
}

float specular_normalize_factor(float roughness)
{
	return (roughness + 2) / 8;
}

float3 roughness_term(float3 halfway_vec, float3 normal, float roughness)
{
	return pow(max(dot(halfway_vec, normal), 0.0f), roughness);
}

float3 roughness_term(float3 c_spec, float3 light_vec, float3 halfway_vec, float3 normal, float roughness)
{
	return pow(max(dot(halfway_vec, normal), 0.0f), roughness) * fresnel_term_schlick(light_vec, halfway_vec, c_spec);
}

float3 specular_term(float3 halfway_vec, float3 normal, float roughness)
{
	return specular_normalize_factor(roughness) * roughness_term(halfway_vec, normal, roughness);
}

float3 specular_term(float3 c_spec, float3 light_vec, float3 halfway_vec, float3 normal, float roughness)
{
	return specular_normalize_factor(roughness) * roughness_term(c_spec, light_vec, halfway_vec, normal, roughness);
}


// diffuse only
float3 calc_brdf(float3 c_diff, float3 l, float3 n)
{
	return max(c_diff * dot(n, l), 0);
}
// diffuse + specular
float3 calc_brdf(float3 c_diff, float3 c_spec, float roughness, float3 l, float3 h, float3 n)
{
	return max((c_diff + specular_term(c_spec, l, h, n, roughness)) * dot(n, l), 0);
}


float attenuation_term(float3 light_pos, float3 pos, float3 atten)
{
	float3 v = light_pos - pos;
	float d2 = dot(v, v);
	float d = sqrt(d2);
	return 1 / dot(atten, float3(1, d, d2));
}

float3 Shading(float3 diff_lighting, float3 spec_lighting, float shininess,
				float3 diffuse, float3 specular, float3 view_dir, float3 normal)
{
	return float3(max(diff_lighting * diffuse
		+ specular_normalize_factor(shininess) * spec_lighting
			* fresnel_term_schlick(normalize(view_dir), normal, specular), 0));
}

float3 Shading(float4 lighting, float shininess, float3 diffuse, float3 specular,
				float3 view_dir, float3 normal)
{
	const float3 RGB_TO_LUM = float3(0.2126f, 0.7152f, 0.0722f);
	float3 diff_lighting = lighting.rgb;
	float3 spec_lighting = lighting.a / (dot(lighting.rgb, RGB_TO_LUM) + 1e-6f) * lighting.rgb;
	return Shading(diff_lighting, spec_lighting, shininess, diffuse, specular,
		view_dir, normal);
}
		]]>
	</shader>
</effect>
