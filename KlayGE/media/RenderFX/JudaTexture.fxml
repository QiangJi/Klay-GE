<?xml version='1.0'?>

<effect>
	<parameter type="texture2DArray" name="juda_tex_cache"/>
	<parameter type="texture2D" name="juda_tex_cache_0"/>
	<parameter type="texture2D" name="juda_tex_cache_1"/>
	<parameter type="texture2D" name="juda_tex_cache_2"/>
	<parameter type="texture2D" name="juda_tex_cache_3"/>
	<parameter type="texture2D" name="juda_tex_cache_4"/>
	<parameter type="texture2D" name="juda_tex_cache_5"/>
	<parameter type="texture2D" name="juda_tex_cache_6"/>

	<parameter type="texture2D" name="juda_tex_indirect"/>

	<parameter type="float3" name="tile_size"/>
	<parameter type="float2" name="inv_juda_tex_cache_size"/>
	<parameter type="float2" name="inv_juda_tex_indirect_size"/>

	<parameter type="sampler" name="jdt_point_sampler">
		<state name="filtering" value="min_mag_mip_point"/>
		<state name="address_u" value="clamp"/>
		<state name="address_v" value="clamp"/>
	</parameter>
	<parameter type="sampler" name="jdt_aniso_sampler">
		<state name="filtering" value="anisotropic"/>
		<state name="address_u" value="clamp"/>
		<state name="address_v" value="clamp"/>
		<state name="max_anisotropy" value="4"/>
	</parameter>

	<shader>
		<![CDATA[
void calc_wrap(out int2 real_tile_xy, out float2 in_tile_coord, int4 tile_bb, float2 texcoord)
{
	texcoord = frac(texcoord);
	float2 part_coord = texcoord * tile_bb.zw;
	real_tile_xy = tile_bb.xy + int2(part_coord);
	in_tile_coord = frac(part_coord);
}

void calc_clamp(out int2 real_tile_xy, out float2 in_tile_coord, int4 tile_bb, float2 texcoord)
{
	texcoord = saturate(texcoord);
	float2 part_coord = texcoord * tile_bb.zw;
	real_tile_xy = tile_bb.xy + int2(part_coord);
	in_tile_coord = frac(part_coord);
}

void calc_mirror(out int2 real_tile_xy, out float2 in_tile_coord, int4 tile_bb, float2 texcoord)
{
	float2 selection_coord = floor(texcoord);
	texcoord = (fmod(selection_coord, 2)) ? 1 + selection_coord - texcoord : texcoord - selection_coord;
	texcoord = saturate(texcoord);
	float2 part_coord = texcoord * tile_bb.zw;
	real_tile_xy = tile_bb.xy + int2(part_coord);
	in_tile_coord = frac(part_coord);
}

void calc_border(out int2 real_tile_xy, out float2 in_tile_coord, int4 tile_bb, float2 texcoord)
{
	texcoord = texcoord < 0 ? -1 : (texcoord > 1 ? 1 : texcoord);
	float2 part_coord = texcoord * tile_bb.zw;
	real_tile_xy = tile_bb.xy + int2(part_coord);
	in_tile_coord = frac(part_coord);
}


void decode_tile_id(out int2 tile_xy, float4 tile_id)
{
	tile_id.xyz *= 255;
	tile_xy.y = floor(tile_id.y / 16);
	tile_xy.x = (tile_id.y - tile_xy.y * 16) * 256 + tile_id.x;
	tile_xy.y += tile_id.z * 16;
}

float3 calc_cache_addr(int2 tile_xy, float2 in_tile_coord)
{
	float3 cache_addr = juda_tex_indirect.SampleLevel(jdt_point_sampler, float2(tile_xy) * inv_juda_tex_indirect_size, 0).rgb * 255;
	cache_addr.xy = cache_addr.xy * tile_size.y + tile_size.z;
	float2 tc = float2((cache_addr.xy + in_tile_coord * tile_size.x) * inv_juda_tex_cache_size);
	return float3(tc, cache_addr.z);
}

float4 judatex2d_internal(int2 tile_xy, float2 in_tile_coord)
{
	float3 cache_addr = calc_cache_addr(tile_xy, in_tile_coord);
#if KLAYGE_MAX_TEX_ARRAY_LEN > 1
	return juda_tex_cache.Sample(jdt_aniso_sampler, cache_addr);
#else
	float2 tc = cache_addr.xy;
	int index = cache_addr.z;
	float4 ret = 0;
	switch (index)
	{
	case 0:
		ret = juda_tex_cache_0.Sample(jdt_aniso_sampler, tc);
		break;

	case 1:
		ret = juda_tex_cache_1.Sample(jdt_aniso_sampler, tc);
		break;

	case 2:
		ret = juda_tex_cache_2.Sample(jdt_aniso_sampler, tc);
		break;

#if KLAYGE_MAX_TEX_UNITS > 4
	case 3:
		ret = juda_tex_cache_3.Sample(jdt_aniso_sampler, tc);
		break;

	case 4:
		ret = juda_tex_cache_4.Sample(jdt_aniso_sampler, tc);
		break;

	case 5:
		ret = juda_tex_cache_5.Sample(jdt_aniso_sampler, tc);
		break;

	case 6:
		ret = juda_tex_cache_6.Sample(jdt_aniso_sampler, tc);
		break;
#endif
	}
	return ret;
#endif
}

float4 judatex2d_bias_internal(int2 tile_xy, float2 in_tile_coord, float bias)
{
	float3 cache_addr = calc_cache_addr(tile_xy, in_tile_coord);
#if KLAYGE_MAX_TEX_ARRAY_LEN > 1
	return juda_tex_cache.SampleBias(jdt_aniso_sampler, cache_addr, bias);
#else
	float2 tc = cache_addr.xy;
	int index = cache_addr.z;
	float4 ret = 0;
	switch (index)
	{
	case 0:
		ret = juda_tex_cache_0.SampleBias(jdt_aniso_sampler, tc, bias);
		break;

	case 1:
		ret = juda_tex_cache_1.SampleBias(jdt_aniso_sampler, tc, bias);
		break;

	case 2:
		ret = juda_tex_cache_2.SampleBias(jdt_aniso_sampler, tc, bias);
		break;

#if KLAYGE_MAX_TEX_UNITS > 4
	case 3:
		ret = juda_tex_cache_3.SampleBias(jdt_aniso_sampler, tc, bias);
		break;

	case 4:
		ret = juda_tex_cache_4.SampleBias(jdt_aniso_sampler, tc, bias);
		break;

	case 5:
		ret = juda_tex_cache_5.SampleBias(jdt_aniso_sampler, tc, bias);
		break;

	case 6:
		ret = juda_tex_cache_6.SampleBias(jdt_aniso_sampler, tc, bias);
		break;
#endif
	}
	return ret;
#endif
}

float4 judatex2d_level_internal(int2 tile_xy, float2 in_tile_coord, float lod)
{
	float3 cache_addr = calc_cache_addr(tile_xy, in_tile_coord);
#if KLAYGE_MAX_TEX_ARRAY_LEN > 1
	return juda_tex_cache.SampleLevel(jdt_aniso_sampler, cache_addr, lod);
#else
	float2 tc = cache_addr.xy;
	int index = cache_addr.z;
	float4 ret = 0;
	switch (index)
	{
	case 0:
		ret = juda_tex_cache_0.SampleLevel(jdt_aniso_sampler, tc, lod);
		break;

	case 1:
		ret = juda_tex_cache_1.SampleLevel(jdt_aniso_sampler, tc, lod);
		break;

	case 2:
		ret = juda_tex_cache_2.SampleLevel(jdt_aniso_sampler, tc, lod);
		break;

#if KLAYGE_MAX_TEX_UNITS > 4
	case 3:
		ret = juda_tex_cache_3.SampleLevel(jdt_aniso_sampler, tc, lod);
		break;

	case 4:
		ret = juda_tex_cache_4.SampleLevel(jdt_aniso_sampler, tc, lod);
		break;

	case 5:
		ret = juda_tex_cache_5.SampleLevel(jdt_aniso_sampler, tc, lod);
		break;

	case 6:
		ret = juda_tex_cache_6.SampleLevel(jdt_aniso_sampler, tc, lod);
		break;
#endif
	}
	return ret;
#endif
}

float4 judatex2d_grad_internal(int2 tile_xy, float2 in_tile_coord, float2 tc_ddx, float2 tc_ddy)
{
	float3 cache_addr = calc_cache_addr(tile_xy, in_tile_coord);
#if KLAYGE_MAX_TEX_ARRAY_LEN > 1
	return juda_tex_cache.SampleGrad(jdt_aniso_sampler, cache_addr, tc_ddx, tc_ddy);
#else
	float2 tc = cache_addr.xy;
	int index = cache_addr.z;
	float4 ret = 0;
	switch (index)
	{
	case 0:
		ret = juda_tex_cache_0.SampleGrad(jdt_aniso_sampler, tc, tc_ddx, tc_ddy);
		break;

	case 1:
		ret = juda_tex_cache_1.SampleGrad(jdt_aniso_sampler, tc, tc_ddx, tc_ddy);
		break;

	case 2:
		ret = juda_tex_cache_2.SampleGrad(jdt_aniso_sampler, tc, tc_ddx, tc_ddy);
		break;

#if KLAYGE_MAX_TEX_UNITS > 4
	case 3:
		ret = juda_tex_cache_3.SampleGrad(jdt_aniso_sampler, tc, tc_ddx, tc_ddy);
		break;

	case 4:
		ret = juda_tex_cache_4.SampleGrad(jdt_aniso_sampler, tc, tc_ddx, tc_ddy);
		break;

	case 5:
		ret = juda_tex_cache_5.SampleGrad(jdt_aniso_sampler, tc, tc_ddx, tc_ddy);
		break;

	case 6:
		ret = juda_tex_cache_6.SampleGrad(jdt_aniso_sampler, tc, tc_ddx, tc_ddy);
		break;
#endif
	}
	return ret;
#endif
}


float4 judatex2d_clamp(int4 tile_bb, float2 texcoord)
{
	int2 tile_xy;
	float2 in_tile_coord;
	calc_clamp(tile_xy, in_tile_coord, tile_bb, texcoord);
#if KLAYGE_DERIVATIVES
	return judatex2d_grad_internal(tile_xy, in_tile_coord, ddx(texcoord), ddy(texcoord));
#else
	return judatex2d_grad_internal(tile_xy, in_tile_coord, 0, 0);
#endif
}
float4 judatex2d_wrap(int4 tile_bb, float2 texcoord)
{
	int2 tile_xy;
	float2 in_tile_coord;
	calc_wrap(tile_xy, in_tile_coord, tile_bb, texcoord);
#if KLAYGE_DERIVATIVES
	return judatex2d_grad_internal(tile_xy, in_tile_coord, ddx(texcoord), ddy(texcoord));
#else
	return judatex2d_grad_internal(tile_xy, in_tile_coord, 0, 0);
#endif
}
float4 judatex2d_mirror(int4 tile_bb, float2 texcoord)
{
	int2 tile_xy;
	float2 in_tile_coord;
	calc_mirror(tile_xy, in_tile_coord, tile_bb, texcoord);
#if KLAYGE_DERIVATIVES
	return judatex2d_grad_internal(tile_xy, in_tile_coord, ddx(texcoord), ddy(texcoord));
#else
	return judatex2d_grad_internal(tile_xy, in_tile_coord, 0, 0);
#endif
}
float4 judatex2d_border(int4 tile_bb, float2 texcoord)
{
	int2 tile_xy;
	float2 in_tile_coord;
	calc_border(tile_xy, in_tile_coord, tile_bb, texcoord);
#if KLAYGE_DERIVATIVES
	return judatex2d_grad_internal(tile_xy, in_tile_coord, ddx(texcoord), ddy(texcoord));
#else
	return judatex2d_grad_internal(tile_xy, in_tile_coord, 0, 0);
#endif
}

float4 judatex2d_bias_clamp(int4 tile_bb, float2 texcoord, float bias)
{
	int2 tile_xy;
	float2 in_tile_coord;
	calc_clamp(tile_xy, in_tile_coord, tile_bb, texcoord);
	return judatex2d_bias_internal(tile_xy, in_tile_coord, bias);
}
float4 judatex2d_bias_wrap(int4 tile_bb, float2 texcoord, float bias)
{
	int2 tile_xy;
	float2 in_tile_coord;
	calc_wrap(tile_xy, in_tile_coord, tile_bb, texcoord);
	return judatex2d_bias_internal(tile_xy, in_tile_coord, bias);
}
float4 judatex2d_bias_mirror(int4 tile_bb, float2 texcoord, float bias)
{
	int2 tile_xy;
	float2 in_tile_coord;
	calc_mirror(tile_xy, in_tile_coord, tile_bb, texcoord);
	return judatex2d_bias_internal(tile_xy, in_tile_coord, bias);
}
float4 judatex2d_bias_border(int4 tile_bb, float2 texcoord, float bias)
{
	int2 tile_xy;
	float2 in_tile_coord;
	calc_border(tile_xy, in_tile_coord, tile_bb, texcoord);
	return judatex2d_bias_internal(tile_xy, in_tile_coord, bias);
}

float4 judatex2d_level_clamp(int4 tile_bb, float2 texcoord, float lod)
{
	int2 tile_xy;
	float2 in_tile_coord;
	calc_clamp(tile_xy, in_tile_coord, tile_bb, texcoord);
	return judatex2d_level_internal(tile_xy, in_tile_coord, lod);
}
float4 judatex2d_level_wrap(int4 tile_bb, float2 texcoord, float lod)
{
	int2 tile_xy;
	float2 in_tile_coord;
	calc_wrap(tile_xy, in_tile_coord, tile_bb, texcoord);
	return judatex2d_level_internal(tile_xy, in_tile_coord, lod);
}
float4 judatex2d_level_mirror(int4 tile_bb, float2 texcoord, float lod)
{
	int2 tile_xy;
	float2 in_tile_coord;
	calc_mirror(tile_xy, in_tile_coord, tile_bb, texcoord);
	return judatex2d_level_internal(tile_xy, in_tile_coord, lod);
}
float4 judatex2d_level_border(int4 tile_bb, float2 texcoord, float lod)
{
	int2 tile_xy;
	float2 in_tile_coord;
	calc_border(tile_xy, in_tile_coord, tile_bb, texcoord);
	return judatex2d_level_internal(tile_xy, in_tile_coord, lod);
}

float4 judatex2d_grad_clamp(int4 tile_bb, float2 texcoord, float2 dx, float2 dy)
{
	int2 tile_xy;
	float2 in_tile_coord;
	calc_clamp(tile_xy, in_tile_coord, tile_bb, texcoord);
	return judatex2d_grad_internal(tile_xy, in_tile_coord, dx, dy);
}
float4 judatex2d_grad_wrap(int4 tile_bb, float2 texcoord, float2 dx, float2 dy)
{
	int2 tile_xy;
	float2 in_tile_coord;
	calc_wrap(tile_xy, in_tile_coord, tile_bb, texcoord);
	return judatex2d_grad_internal(tile_xy, in_tile_coord, dx, dy);
}
float4 judatex2d_grad_mirror(int4 tile_bb, float2 texcoord, float2 dx, float2 dy)
{
	int2 tile_xy;
	float2 in_tile_coord;
	calc_mirror(tile_xy, in_tile_coord, tile_bb, texcoord);
	return judatex2d_grad_internal(tile_xy, in_tile_coord, dx, dy);
}
float4 judatex2d_grad_border(int4 tile_bb, float2 texcoord, float2 dx, float2 dy)
{
	int2 tile_xy;
	float2 in_tile_coord;
	calc_border(tile_xy, in_tile_coord, tile_bb, texcoord);
	return judatex2d_grad_internal(tile_xy, in_tile_coord, dx, dy);
}
		]]>
	</shader>
</effect>
