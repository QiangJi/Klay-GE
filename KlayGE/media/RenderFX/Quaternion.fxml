<?xml version='1.0'?>

<effect>
	<shader>
		<![CDATA[
float4 conjugate_quat(float4 rhs)
{
	return float4(-rhs.xyz, rhs.w);
}

float4 unit_axis_to_unit_axis(float3 from, float3 to)
{
	float cos_theta = dot(from, to);
	if (abs(cos_theta - 1) < 1e-6f)
	{
		return float4(0, 0, 0, 1);
	}
	else
	{
		if (abs(cos_theta + 1) < 1e-6f)
		{
			return float4(1, 0, 0, 0);
		}
		else
		{
			float3 w = cross(from, to);
			return normalize(float4(w, 1 + cos_theta));
		}
	}
}

float4 axis_to_axis(float3 from, float3 to)
{
	return unit_axis_to_unit_axis(normalize(from), normalize(to));
}

float4 exp_quat(float4 rhs)
{
	float theta = length(rhs.xyz);
	return float4(normalize(rhs.xyz) * sin(theta), cos(theta));
}

float4 ln_quat(float4 rhs)
{
	float theta_2 = acos(rhs.w);
	return float4(normalize(rhs.xyz) * (theta_2 + theta_2), 0);
}

float4 inverse_quat(float4 rhs)
{
	return conjugate_quat(rhs) / length(rhs);
}

float4 mul_quat(float4 lhs, float4 rhs)
{
	float4 c, r;
	c.xyz = cross(rhs.xyz, lhs.xyz);
	c.w = -dot(rhs.xyz, lhs.xyz);
	r = lhs * rhs.w + c;
	r.xyz = rhs.xyz * lhs.w + r.xyz;
	return r;
}

float3 transform_quat(float3 v, float4 quat)
{
	return v + cross(quat.xyz, cross(quat.xyz, v) + quat.w * v) * 2;
}

float4 rotation_quat(float3 yaw_pitch_roll)
{
	float3 ang = yaw_pitch_roll / 2;
	float3 s;
	float3 c;
	sincos(ang, s, c);

	return float4(
		s.x * c.y * c.z + c.x * s.y * s.z,
		c.x * s.y * c.z - s.x * c.y * s.z,
		c.x * c.y * s.z - s.x * s.y * c.z,
		s.x * s.y * s.z + c.x * c.y * c.z);
}

void quat_to_axis_angle(out float3 vec, out float ang, float4 quat)
{
	float tw = acos(quat.w);

	ang = tw + tw;
	vec = quat.xyz;
	
	float stw = sin(tw);
	if (stw != 0)
	{
		vec /= stw;
	}
}

float4 axis_angle_to_quat(float3 v, float angle)
{
	float sa, ca;
	sincos(angle / 2, sa, ca);

	float4 ret = float4(sa.xxx, ca);
	if (dot(v, v) != 0)
	{
		ret.xyz *= normalize(v);
	}

	return ret;
}

float4 slerp(float4 lhs, float4 rhs, float s)
{
	float scale0, scale1;

	// DOT the quats to get the cosine of the angle between them
	float cosom = dot(lhs, rhs);

	float dir = 1;
	if (cosom < 0)
	{
		dir = -1;
		cosom = -cosom;
	}
	
	// make sure they are different enough to avoid a divide by 0
	if (cosom < 1 - 1e-6f)
	{
		// SLERP away
		const float omega = acos(cosom);
		const float isinom = 1 / sin(omega);
		scale0 = sin((1 - s) * omega) * isinom;
		scale1 = sin(s * omega) * isinom;
	}
	else
	{
		// LERP is good enough at this distance
		scale0 = 1 - s;
		scale1 = s;
	}

	// Compute the result
	return scale0 * lhs + dir * scale1 * rhs;
}

float4 mat4_to_quat(float4x4 mat)
{
	float3 diag = float3(mat._m00, mat._m11, mat._m22);
	float tr = diag.x + diag.y + diag.z;
	float4 s = sqrt(float4(tr, diag.y - (diag.z + diag.x),
				diag.z - (diag.x + diag.y), diag.x - (diag.y + diag.z)) + 1);
	float4 quat = s.wyzx / 2;
	float4 s2 = 0.5 / s;

	s.x = s2.x;
	if (s.y != 0)
	{
		s.y = s2.y;
	}
	if (s.z != 0)
	{
		s.z = s2.z;
	}
	if (s.w != 0)
	{
		s.w = s2.w;
	}

	// check the diagonal
	if (tr > 0)
	{
		quat.xyz = (mat._m12_m20_m01 - mat._m21_m02_m10) * s.x;
	}
	else
	{
		if ((diag.y > diag.x) && (diag.z <= diag.y))
		{
			quat.xzw = (mat._m01_m21_m20 - mat._m10_m12_m02) * s.y;
		}
		else
		{
			if (((diag.y <= diag.x) && (diag.z > diag.x)) || (diag.z > diag.y))
			{
				quat.xyw = (mat._m02_m12_m01 - mat._m20_m21_m10) * s.z;
			}
			else
			{
				quat.yzw = (mat._m10_m20_m12 - mat._m01_m02_m21) * s.w;
			}
		}
	}

	return normalize(quat);
}

float4x4 quat_to_mat4(float4 quat)
{
	float3 xyz2 = quat.xyz + quat.xyz;
			  
	float3 c0 = quat.x * xyz2;
	float3 c1 = quat.yyz * xyz2.yzz;
	float3 c2 = quat.w * xyz2;

	return float4x4(
		1 - c1.x - c1.z,	c0.y + c2.z,		c0.z - c2.y,		0,
		c0.y - c2.z,		1 - c0.x - c1.z,	c1.y + c2.x,		0,
		c0.z + c2.y,		c1.y - c2.x,		1 - c0.x - c1.x,	0,
		0,					0,					0,					1);
}

float4 bary_centric_quat(float4 q1, float4 q2, float4 q3, float f, float g)
{
	float4 ret;
	const float s = f + g;
	if (s != 0)
	{
		ret = slerp(slerp(q1, q2, s), slerp(q1, q3, s), g / s);
	}
	else
	{
		ret = q1;
	}
	
	return ret;
}


// Dual quaternion

float4 quat_trans_to_udq(float4 q, float3 t)
{
	return mul_quat(q, float4(0.5f * t.xyz, 0));
}

float3 udq_to_trans(float4 ndp, float4 dp)
{
	float4 qeq0 = mul_quat(conjugate_quat(ndp), dp);
	return 2 * qeq0.xyz;
}

float3 dq_to_trans(float4 ndp, float4 dp)
{
	return udq_to_trans(ndp, dp) / length(ndp);
}

float4x4 udq_to_matrix(float4 ndp, float4 dp)
{
	float4x4 m;

	float len2 = dot(ndp, ndp);
	float w = ndp.w, x = ndp.x, y = ndp.y, z = ndp.z;
	float t0 = dp.w, t1 = dp.x, t2 = dp.y, t3 = dp.z;

	m[0][0] = w * w + x * x - y * y - z * z;
	m[1][0] = 2 * x * y - 2 * w * z;
	m[2][0] = 2 * x * z + 2 * w * y;
	m[0][1] = 2 * x * y + 2 * w * z;
	m[1][1] = w * w + y * y - x * x - z * z;
	m[2][1] = 2 * y * z - 2 * w * x;
	m[0][2] = 2 * x * z - 2 * w * y;
	m[1][2] = 2 * y * z + 2 * w * x;
	m[2][2] = w * w + z * z - x * x - y * y;

	m[3][0] = -2 * t0 * x + 2 * w * t1 - 2 * t2 * z + 2 * y * t3;
	m[3][1] = -2 * t0 * y + 2 * t1 * z - 2 * x * t3 + 2 * w * t2;
	m[3][2] = -2 * t0 * z + 2 * x * t2 + 2 * w * t3 - 2 * t1 * y;

	m[0][3] = 0;
	m[1][3] = 0;
	m[2][3] = 0;
	m[3][3] = len2;

	m /= len2;

	return m;
}
		]]>
	</shader>
</effect>
