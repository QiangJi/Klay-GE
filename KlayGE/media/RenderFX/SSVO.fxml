<?xml version='1.0'?>

<effect>
	<include name="PostProcess.fxml"/>
	<include name="DeferredRenderingUtil.fxml"/>
	<include name="BilateralBlur.fxml"/>
	
	<cbuffer name="never_changes">
		<parameter type="float2" name="sphere_xy" array_size="2">
			<value>
				<![CDATA[
					0.66667, 0,
					0, 0.33333
				]]>
			</value>
		</parameter>
	</cbuffer>

	<cbuffer name="per_frame">
		<parameter type="float4x4" name="proj"/>
		<parameter type="float4x4" name="inv_proj"/>
	</cbuffer>

	<cbuffer name="vo_params">
		<parameter type="float" name="vo_intensity" value="2.14"/>
	</cbuffer>
	<parameter type="sampler" name="bilinear_sampler">
		<state name="filtering" value="min_mag_linear_mip_point"/>
		<state name="address_u" value="clamp"/>
		<state name="address_v" value="clamp"/>
	</parameter>

	<parameter type="sampler" name="point_sampler">
		<state name="filtering" value="min_mag_mip_point"/>
		<state name="address_u" value="clamp"/>
		<state name="address_v" value="clamp"/>
	</parameter>

	<parameter type="texture2D" name="g_buffer_tex"/>
	<parameter type="texture2D" name="depth_tex"/>

	<parameter type="texture2D" name="noise_tex">
		<annotation type="string" name="SasResourceAddress" value="white_noise_tex.dds"/>
	</parameter>
	<parameter type="sampler" name="bilinear_wrap_sampler">
		<state name="filtering" value="min_mag_linear_mip_point"/>
		<state name="address_u" value="wrap"/>
		<state name="address_v" value="wrap"/>
	</parameter>

	<shader>
		<![CDATA[
float CalcAlchemyObscurance(float2 tc, float3 pos_es, float3 x_dir, float3 y_dir, float3 normal, float radius, float depth_center)
{
	float rotate = noise_tex.Sample(bilinear_wrap_sampler, tc * 1.5f).x;
	float sz, cz;
	sincos(rotate, sz, cz);

	x_dir *= radius;
	y_dir *= radius;

	float sqr_radius = radius * radius;
	float obscurance = 0;
	float total_weight = 0;
	for (int i = 0; i < 2; ++ i)
	{
		float2 sxy = sphere_xy[i];
		sxy = float2(dot(sxy, float2(cz, -sz)), dot(sxy, float2(sz, cz)));
		for (int j = 0; j < 2; ++ j)
		{
			float3 sample_point_offset = sxy.x * x_dir + sxy.y * y_dir;
			float3 sample_point = pos_es + sample_point_offset;
			float4 sample_point_ss = mul(float4(sample_point, 1), proj);

			float2 tc_sample = TexCoordFromPos(sample_point_ss / sample_point_ss.w);
			float depth_sample = depth_tex.Sample(point_sampler, tc_sample).r;
			float3 pos_es_sample = sample_point * (depth_sample / sample_point.z);
			float3 dir_es_sample = pos_es_sample - pos_es;

			float epsilon = 0.0001f;
			float beta = 0.002f;

			float dist_sqr = dot(dir_es_sample, dir_es_sample);
			if (dist_sqr < sqr_radius)
			{
				obscurance += max(0.0f, dot(dir_es_sample, normal) - depth_center * beta) / (dist_sqr + epsilon);
				total_weight += 1.0f;
			}

			sxy = -sxy;
		}
	}

	float delta = 1.0f;
	return (total_weight > 1e-6f) ? 2.0f * delta * obscurance / total_weight : 0;
}

void SSVOVS(float4 pos : POSITION,
					out float2 oTex : TEXCOORD0,
					out float3 oViewDir : TEXCOORD1,
					out float4 oPos : SV_Position)
{
	oTex = TexCoordFromPos(pos);
	oPos = pos;
	oViewDir = mul(pos, inv_proj).xyz;
}

float4 SSVOPS(float2 tc : TEXCOORD0, float3 view_dir : TEXCOORD1) : SV_Target
{
	float radius = 1;
	float obscurance = 1;

	float depth = depth_tex.Sample(point_sampler, tc).r;
	float3 normal = GetNormal(g_buffer_tex.Sample(point_sampler, tc));

	view_dir = normalize(view_dir);
	float3 pos_es = view_dir * (depth / view_dir.z);

	float3 y_dir = normalize(cross(normal, float3(0, 0, 1)));
	float3 x_dir = cross(y_dir, normal);

	obscurance = CalcAlchemyObscurance(tc, pos_es, x_dir, y_dir, normal, radius, depth);
	return max(0.0f, 1.0f - obscurance);
}
		]]>
	</shader>

	<technique name="SSVO">
		<pass name="p0">
			<state name="depth_enable" value="false"/>
			<state name="depth_write_mask" value="false"/>

			<state name="vertex_shader" value="SSVOVS()"/>
			<state name="pixel_shader" value="SSVOPS()"/>
		</pass>
	</technique>

	<technique name="SSVOBlurX" inherit="BlurX1">
	</technique>

	<technique name="SSVOBlurY" inherit="BlurY1">
		<pass name="p0">
			<state name="blend_enable" value="true"/>
			<state name="blend_op" value="add"/>
			<state name="src_blend" value="dst_color"/>
			<state name="dest_blend" value="zero"/>
			<state name="blend_op_alpha" value="add"/>
			<state name="src_blend_alpha" value="zero"/>
			<state name="dest_blend_alpha" value="dst_alpha"/>
		</pass>
	</technique>
</effect>
