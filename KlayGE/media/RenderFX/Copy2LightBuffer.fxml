<?xml version="1.0" encoding="utf-8"?>

<effect>
	<include name="PostProcess.fxml"/>
	<include name="DeferredRenderingUtil.fxml"/>
	<include name="Lighting.fxml"/>

	<parameter type="sampler" name="point_sampler">
		<state name="filtering" value="min_mag_mip_point"/>
		<state name="address_u" value="clamp"/>
		<state name="address_v" value="clamp"/>
	</parameter>
	<parameter type="sampler" name="linear_sampler">
		<state name="filtering" value="min_mag_linear_mip_point"/>
		<state name="address_u" value="clamp"/>
		<state name="address_v" value="clamp"/>
	</parameter>

	<parameter type="float" name="scaling_factor"/>
	<parameter type="float2" name="inv_width_height"/>
	<parameter type="float3" name="depth_near_far_invfar"/>
	<parameter type="float4x4" name="inv_proj"/>
	<parameter type="texture2D" name="indirect_lighting_tex"/>
	<parameter type="texture2D" name="g_buffer_tex"/>
	<parameter type="texture2D" name="g_buffer_1_tex"/>
	<parameter type="texture2D" name="depth_tex"/>

	<shader>
		<![CDATA[
float4 NearestDepthUpsamplingIL(float2 tc)
{
	float2 l1_inv_width_height = inv_width_height * 2;
	float2 tc0 = tc - inv_width_height;
	float z00 = depth_tex.SampleLevel(point_sampler, tc0, 1).r;
	float z10 = depth_tex.SampleLevel(point_sampler, tc0 + float2(l1_inv_width_height.x, 0), 1).r;
	float z01 = depth_tex.SampleLevel(point_sampler, tc0 + float2(0, l1_inv_width_height.y), 1).r;
	float z11 = depth_tex.SampleLevel(point_sampler, tc0 + l1_inv_width_height, 1).r;
	float z_full = depth_tex.Sample(point_sampler, tc).r;
	float threshold = 0.25f;

	float3 ndus = NearestDepthUpsampling(tc0, float4(z00, z10, z01, z11), z_full, l1_inv_width_height, threshold);
	if (ndus.z > 0)
	{
		return indirect_lighting_tex.SampleLevel(linear_sampler, tc, 0);
	}
	else
	{
		return indirect_lighting_tex.SampleLevel(point_sampler, ndus.xy, 0);
	}
}

void CopyToLightBufferVS(float4 pos : POSITION,
				out float2 oTc0 : TEXCOORD0,
				out float3 oViewDir : TEXCOORD1,
				out float4 oPos : SV_Position)
{
	PostProcessVS(pos, oTc0, oPos);
	oViewDir = -mul(oPos, inv_proj).xyz;
}

float4 CopyToLightBufferPS(float2 tc : TEXCOORD0, float3 view_dir : TEXCOORD1) : SV_Target
{
	view_dir = normalize(view_dir);
	float4 ndc = g_buffer_tex.Sample(point_sampler, tc);
	float shininess = GetShininess(ndc);
	float3 normal = GetNormal(ndc);
	
	float detail_factor = dot(view_dir, normal) * 0.5f + 0.5f;

	float4 lighting = float4(NearestDepthUpsamplingIL(tc).xyz * scaling_factor * detail_factor, 0);
	
	float4 diffuse = g_buffer_1_tex.Sample(point_sampler, tc);
	return float4(Shading(lighting, shininess, diffuse.xyz, diffuse.w, view_dir, normal), 1);
}
		]]>
	</shader>

	<technique name="CopyToLightBuffer">
		<pass name="p0">
			<state name="depth_enable" value="false"/>
			<state name="depth_write_mask" value="false"/>

			<state name="blend_enable" value="true"/>
			<state name="blend_op" value="add"/>
			<state name="src_blend" value="one"/>
			<state name="dest_blend" value="one"/>
			<state name="blend_op_alpha" value="add"/>
			<state name="src_blend_alpha" value="one"/>
			<state name="dest_blend_alpha" value="one"/>

			<state name="vertex_shader" value="CopyToLightBufferVS()"/>
			<state name="pixel_shader" value="CopyToLightBufferPS()"/>
		</pass>
	</technique>

	<technique name="CopyToLightBufferI">
		<pass name="p0">
			<state name="depth_enable" value="false"/>
			<state name="depth_write_mask" value="false"/>

			<state name="blend_enable" value="false"/>

			<state name="vertex_shader" value="CopyToLightBufferVS()"/>
			<state name="pixel_shader" value="CopyToLightBufferPS()"/>
		</pass>
	</technique>
</effect>
