<?xml version='1.0'?>

<effect>
	<parameter type="float3" name="eye_pos"/>
	<parameter type="float3" name="flare_param" array_size="10"/>
	<parameter type="float" name="alpha_fac"/>
	<parameter type="float" name="scale"/>

	<parameter type="texture2D" name="flare_tex">
		<annotation type="string" name="SasResourceAddress" value="flare.dds"/>
	</parameter>
	<parameter type="int" name="total_slices" value="4"/>
	<parameter type="int" name="flare_id" array_size="6">
		<value>
			<![CDATA[
				1, 3, 2, 1, 0, 3
			]]>
		</value>
	</parameter>
	<parameter type="float4" name="flare_clr" array_size="6">
		<value>
			<![CDATA[
				1.00, 0.00, 0.00, 1,
				0.46, 0.01, 0.62, 1,
				0.85, 0.63, 0.01, 1,
				0.02, 0.65, 0.81, 1,
				0.39, 0.28, 0.01, 1,
				0.01, 0.63, 0.68, 1
			]]>
		</value>
	</parameter>

	<parameter type="sampler" name="linear_sampler">
		<state name="filtering" value="min_mag_mip_linear"/>
		<state name="address_u" value="wrap"/>
		<state name="address_v" value="wrap"/>
	</parameter>

	<shader>
		<![CDATA[
void LensFlareVS(float3 pos : POSITION,
					out float3 tex_coord : TEXCOORD0,
					out float4 oPos : SV_Position)
{
	int index = pos.z;
	float2 flare_pos = flare_param[index].xy;
	float scale_fac = flare_param[index].z;
	oPos = float4(pos.xy * float2(1, scale) * scale_fac + flare_pos, 0, 1);
	
	tex_coord.xy = float2(pos.x, -pos.y) * 0.5f + 0.5f;
	float scale = 1.0f / total_slices;
	tex_coord.xy = tex_coord.xy * float2(1, scale) + float2(0, flare_id[index] * scale);
	tex_coord.z = index;
}

float4 LensFlarePS(float3 tex_coord : TEXCOORD0) : SV_Target0
{
	float3 clr = flare_tex.Sample(linear_sampler, tex_coord.xy).rgb;
	float alpha = alpha_fac * dot(clr, 1);
	return float4(clr * alpha_fac * flare_clr[int(tex_coord.z)].rgb, alpha);
}
		]]>
	</shader>
	<technique name="LensFlare">
		<pass name="p0">
			<state name="depth_enable" value="false"/>
			<state name="depth_write_mask" value="0"/>
			
			<state name="blend_enable" value="true"/>
			<state name="src_blend" value="src_alpha"/>
			<state name="dest_blend" value="one"/>
			
			<state name="vertex_shader" value="LensFlareVS()"/>
			<state name="pixel_shader" value="LensFlarePS()"/>
		</pass>
	</technique>
</effect>
