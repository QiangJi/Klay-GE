<?xml version='1.0'?>

<effect>
	<include name="PostProcess.fxml"/>

	<parameter type="texture2D" name="color_tex"/>
	<parameter type="texture2D" name="depth_tex"/>
	<parameter type="texture2D" name="motion_vec_tex"/>

	<parameter type="sampler" name="point_sampler">
		<state name="filtering" value="min_mag_mip_point"/>
		<state name="address_u" value="clamp"/>
		<state name="address_v" value="clamp"/>
	</parameter>

	<shader>
		<![CDATA[
float4 MotionBlurPS(float2 tex_coord0 : TEXCOORD0) : SV_Target
{
	float2 motion_vec = (motion_vec_tex.Sample(point_sampler, tex_coord0).rg - 0.5f) / 30;
	const int NUM_SAMPLES = 8;
	float3 clr = color_tex.Sample(point_sampler, tex_coord0).xyz;
	float depth = depth_tex.Sample(point_sampler, tex_coord0).x;
	float sum_weight = 1;
	for (int i = 1; i < NUM_SAMPLES; ++ i)
	{
		float2 tc = tex_coord0 + motion_vec * i / NUM_SAMPLES;
		float3 other_clr = color_tex.Sample(point_sampler, tc).xyz;
		float other_depth = depth_tex.Sample(point_sampler, tc).x;
		if (abs(depth - other_depth) < 0.1f)
		{
			clr += other_clr;
			++ sum_weight;
		}
	}
	clr /= sum_weight;
	return float4(clr, depth);
}

float4 MotionBlurMotionVecPS(float2 tex_coord0 : TEXCOORD0) : SV_Target
{
	float2 motion_vec = (motion_vec_tex.Sample(point_sampler, tex_coord0).rg - 0.5f) / 10;
	return float4(motion_vec.xy * 10, 1, 1);
}
		]]>
	</shader>

	<technique name="MotionBlur">
		<pass name="p0">
			<state name="depth_enable" value="false"/>
			<state name="depth_write_mask" value="0"/>

			<state name="vertex_shader" value="PostProcessVS()"/>
			<state name="pixel_shader" value="MotionBlurPS()"/>
		</pass>
	</technique>
				
	<technique name="MotionBlurMotionVec">
		<pass name="p0">
			<state name="depth_enable" value="false"/>
			<state name="depth_write_mask" value="0"/>

			<state name="vertex_shader" value="PostProcessVS()"/>
			<state name="pixel_shader" value="MotionBlurMotionVecPS()"/>
		</pass>
	</technique>
</effect>
