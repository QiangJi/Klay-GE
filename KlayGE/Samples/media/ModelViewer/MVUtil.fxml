<?xml version='1.0'?>

<effect>
	<parameter type="float4x4" name="mvp"/>

	<shader>
		<![CDATA[
void AxisVS(float4 pos : POSITION,
				out float4 oClr	: COLOR0,
				out float4 oPos : SV_Position)
{
	oPos = mul(float4(pos.xyz, 1), mvp);
	if (pos.w < 0.5f)
	{
		oClr = float4(1, 0, 0, 1);
	}
	else
	{
		if (pos.w < 1.5f)
		{
			oClr = float4(0, 1, 0, 1);
		}
		else
		{
			oClr = float4(0, 0, 1, 1);
		}
	}
}

void AxisDepthVS(float4 pos : POSITION,
				out float oDepth : TEXCOORD0,
				out float4 oPos : SV_Position)
{
	oPos = mul(float4(pos.xyz, 1), mvp);
	oDepth = oPos.w;
}

float4 AxisRT0PS() : SV_Target
{
	return 0;
}

float4 AxisRT1PS(float4 clr : COLOR0) : SV_Target
{
	return clr;
}

float4 AxisDepthPS(float depth : TEXCOORD0) : SV_Target
{
	return depth;
}

void AxisMRTPS(float4 clr : COLOR0,
	out float4 mrt_0 : SV_Target0, out float4 mrt_1 : SV_Target1)
{
	mrt_0 = 0;
	mrt_1 = clr;
}
		]]>
	</shader>

	<technique name="AxisDepthTech">
		<pass name="p0">
			<state name="depth_func" value="always_pass"/>
			
			<state name="front_stencil_enable" value="true"/>
			<state name="front_stencil_func" value="always_pass"/>
			<state name="front_stencil_ref" value="128"/>
			<state name="front_stencil_pass" value="replace"/>
			<state name="back_stencil_enable" value="true"/>
			<state name="back_stencil_func" value="always_pass"/>
			<state name="back_stencil_ref" value="128"/>
			<state name="back_stencil_pass" value="replace"/>

			<state name="vertex_shader" value="AxisDepthVS()"/>
			<state name="pixel_shader" value="AxisDepthPS()"/>
		</pass>
	</technique>

	<technique name="AxisRT0Tech">
		<pass name="p0">
			<state name="depth_func" value="always_pass"/>
			
			<state name="front_stencil_enable" value="true"/>
			<state name="front_stencil_func" value="always_pass"/>
			<state name="front_stencil_ref" value="128"/>
			<state name="front_stencil_pass" value="replace"/>
			<state name="back_stencil_enable" value="true"/>
			<state name="back_stencil_func" value="always_pass"/>
			<state name="back_stencil_ref" value="128"/>
			<state name="back_stencil_pass" value="replace"/>

			<state name="vertex_shader" value="AxisVS()"/>
			<state name="pixel_shader" value="AxisRT0PS()"/>
		</pass>
	</technique>

	<technique name="AxisRT1Tech">
		<pass name="p0">
			<state name="depth_func" value="always_pass"/>
			
			<state name="front_stencil_enable" value="true"/>
			<state name="front_stencil_func" value="always_pass"/>
			<state name="front_stencil_ref" value="128"/>
			<state name="front_stencil_pass" value="replace"/>
			<state name="back_stencil_enable" value="true"/>
			<state name="back_stencil_func" value="always_pass"/>
			<state name="back_stencil_ref" value="128"/>
			<state name="back_stencil_pass" value="replace"/>

			<state name="vertex_shader" value="AxisVS()"/>
			<state name="pixel_shader" value="AxisRT1PS()"/>
		</pass>
	</technique>

	<technique name="AxisMRTTech">
		<pass name="p0">
			<state name="depth_func" value="always_pass"/>
			
			<state name="front_stencil_enable" value="true"/>
			<state name="front_stencil_func" value="always_pass"/>
			<state name="front_stencil_ref" value="128"/>
			<state name="front_stencil_pass" value="replace"/>
			<state name="back_stencil_enable" value="true"/>
			<state name="back_stencil_func" value="always_pass"/>
			<state name="back_stencil_ref" value="128"/>
			<state name="back_stencil_pass" value="replace"/>
			
			<state name="vertex_shader" value="AxisVS()"/>
			<state name="pixel_shader" value="AxisMRTPS()"/>
		</pass>
	</technique>

	<shader>
		<![CDATA[
void GridVS(float4 pos : POSITION,
				out float2 oMark : TEXCOORD0,
				out float4 oPos : SV_Position)
{
	oPos = mul(pos, mvp);

	if (abs(pos.x) < 1e-6f)
	{
		oMark.x = pos.z * 0.2f;
		oMark.y = 2.5f;
	}
	else if (abs(pos.z) < 1e-6f)
	{
		oMark.x = pos.x * 0.2f;
		oMark.y = 1.5f;
	}
	else
	{
		oMark.x = 0.5f;
		oMark.y = 0.5f;
	}
}

void GridDepthVS(float4 pos : POSITION,
				out float oDepth : TEXCOORD0,
				out float4 oPos : SV_Position)
{
	oPos = mul(float4(pos.xyz, 1), mvp);
	oDepth = oPos.w;
}

float4 GridRT0PS() : SV_Target
{
	return 0;
}

float4 GridRT1PS(float2 mark : TEXCOORD0) : SV_Target
{
	float4 clr;
	if (mark.y > 2)
	{
		clr = float4(0, abs(mark.x), -mark.x, 1);
	}
	else if (mark.y > 1)
	{
		clr = float4(abs(mark.x), 0, -mark.x, 1);
	}
	else
	{
		clr = float4(0.5f, 0.5f, 0.5f, 1);
	}
	return clr;
}

float4 GridDepthPS(float depth : TEXCOORD0) : SV_Target
{
	return depth;
}

void GridMRTPS(float2 mark : TEXCOORD0,
	out float4 mrt_0 : SV_Target0, out float4 mrt_1 : SV_Target1)
{
	mrt_0 = 0;
	
	float4 clr;
	if (mark.y > 2)
	{
		clr = float4(0, abs(mark.x), -mark.x, 1);
	}
	else if (mark.y > 1)
	{
		clr = float4(abs(mark.x), 0, -mark.x, 1);
	}
	else
	{
		clr = float4(0.5f, 0.5f, 0.5f, 1);
	}
	mrt_1 = clr;
}
		]]>
	</shader>

	<technique name="GridDepthTech">
		<pass name="p0">
			<state name="front_stencil_enable" value="true"/>
			<state name="front_stencil_func" value="always_pass"/>
			<state name="front_stencil_ref" value="128"/>
			<state name="front_stencil_pass" value="replace"/>
			<state name="back_stencil_enable" value="true"/>
			<state name="back_stencil_func" value="always_pass"/>
			<state name="back_stencil_ref" value="128"/>
			<state name="back_stencil_pass" value="replace"/>

			<state name="vertex_shader" value="GridDepthVS()"/>
			<state name="pixel_shader" value="GridDepthPS()"/>
		</pass>
	</technique>
	
	<technique name="GridRT0Tech">
		<pass name="p0">
			<state name="front_stencil_enable" value="true"/>
			<state name="front_stencil_func" value="always_pass"/>
			<state name="front_stencil_ref" value="128"/>
			<state name="front_stencil_pass" value="replace"/>
			<state name="back_stencil_enable" value="true"/>
			<state name="back_stencil_func" value="always_pass"/>
			<state name="back_stencil_ref" value="128"/>
			<state name="back_stencil_pass" value="replace"/>

			<state name="vertex_shader" value="GridVS()"/>
			<state name="pixel_shader" value="GridRT0PS()"/>
		</pass>
	</technique>

	<technique name="GridRT1Tech">
		<pass name="p0">
			<state name="depth_func" value="equal"/>
			<state name="depth_write_mask" value="false"/>
			
			<state name="front_stencil_enable" value="true"/>
			<state name="front_stencil_func" value="always_pass"/>
			<state name="front_stencil_ref" value="128"/>
			<state name="front_stencil_pass" value="replace"/>
			<state name="back_stencil_enable" value="true"/>
			<state name="back_stencil_func" value="always_pass"/>
			<state name="back_stencil_ref" value="128"/>
			<state name="back_stencil_pass" value="replace"/>

			<state name="vertex_shader" value="GridVS()"/>
			<state name="pixel_shader" value="GridRT1PS()"/>
		</pass>
	</technique>

	<technique name="GridMRTTech">
		<pass name="p0">
			<state name="front_stencil_enable" value="true"/>
			<state name="front_stencil_func" value="always_pass"/>
			<state name="front_stencil_ref" value="128"/>
			<state name="front_stencil_pass" value="replace"/>
			<state name="back_stencil_enable" value="true"/>
			<state name="back_stencil_func" value="always_pass"/>
			<state name="back_stencil_ref" value="128"/>
			<state name="back_stencil_pass" value="replace"/>
			
			<state name="vertex_shader" value="GridVS()"/>
			<state name="pixel_shader" value="GridMRTPS()"/>
		</pass>
	</technique>
</effect>
