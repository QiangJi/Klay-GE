<?xml version='1.0'?>

<effect>
	<include name="DeferredRenderingUtil.fxml"/>
	<include name="util.fxml"/>
	<include name="Noise.fxml"/>
	<include name="Quaternion.fxml"/>
	<include name="GBuffer.fxml"/>
	<include name="InfTerrain.fxml"/>
	
	<parameter type="texture2D" name="ground_tex_detail">
		<annotation type="string" name="SasResourceAddress" value="RealSand38BoH.dds"/>
	</parameter>
	<parameter type="texture2D" name="grass_tex_base">
		<annotation type="string" name="SasResourceAddress" value="grass.dds"/>
	</parameter>
	<parameter type="texture2D" name="ground_tex_base">
		<annotation type="string" name="SasResourceAddress" value="RealSand40BoH.dds"/>
	</parameter>

	<parameter type="sampler" name="linear_sampler">
		<state name="filtering" value="min_mag_mip_linear"/>
		<state name="address_u" value="wrap"/>
		<state name="address_v" value="wrap"/>
	</parameter>

	<shader>
		<![CDATA[
void NoiseTerrain(float2 pos,
			out float3 oNormal,
			out float3 oTexcoord,
			out float4 oPos)
{
	float lacunarity = 1.93485736f;
	float gain = 1.0f / 1.93485736f;

	float4 pos_os = GetInfTerrainPosOS(pos, 0);

	pos_os.y = fBm(pos_os.xz / 192, 5, lacunarity, gain);
	oTexcoord.z = pos_os.y * 5 + 0.6f;
	
	float d = 1.0f;
	float fx = fBm((pos_os.xz + float2(d, 0)) / 192, 5, lacunarity, gain);
	float fy = fBm((pos_os.xz + float2(0, d)) / 192, 5, lacunarity, gain);
	oNormal.xz = -(float2(fx, fy) - pos_os.y) * stretch;
	oNormal = normalize(float3(oNormal.x, 1, oNormal.z));
	pos_os.y *= stretch;
	pos_os.y += base_level;

	oPos = mul(pos_os, mvp);
	oTexcoord.xy = pos_os.xz / 8;
}

void TerrainGBufferVS(float2 pos : POSITION,
			out float3 oTexCoord : TEXCOORD0,
			out float4 oNormalFog : TEXCOORD1,
			out float4 oPos : SV_Position)
{
	float3 normal;
	NoiseTerrain(pos,
		normal, oTexCoord, oPos);

	oNormalFog.xyz = mul(normal, (float3x3)model_view);
	oNormalFog.w = saturate(oPos.w / 1200.0f);
}

float4 TerrainGBufferRT0PS(float3 texcoord : TEXCOORD0, float4 normal_fog : TEXCOORD1) : SV_Target
{
	float3 normal = normalize(normal_fog.xyz);
	float3 fitting_tc = FittingCoord(normal);
	normal *= fitting_tc.z * normals_fitting_tex.Sample(bilinear_sampler, fitting_tc.xy).r;
	
	return StoreGBufferRT0(normal, shininess_clr.x);
}

float4 TerrainGBufferRT1PS(float3 texcoord : TEXCOORD0, float4 normal_fog : TEXCOORD1) : SV_Target
{
	float3 diffuse = lerp((ground_tex_detail.Sample(aniso_sampler, texcoord.xy).rgb + ground_tex_base.Sample(aniso_sampler, texcoord.xy / 16).rgb) / 2,
		grass_tex_base.Sample(aniso_sampler, texcoord.xy).rgb, saturate(texcoord.z));
	float specular = 0;
	
	return StoreGBufferRT1(diffuse, specular);
}

void TerrainGBufferMRTPS(float3 texcoord : TEXCOORD0, float4 normal_fog : TEXCOORD1,
					out float4 mrt_0 : SV_Target0, out float4 mrt_1 : SV_Target1)
{
	float3 normal = normalize(normal_fog.xyz);
	float3 fitting_tc = FittingCoord(normal);
	normal *= fitting_tc.z * normals_fitting_tex.Sample(bilinear_sampler, fitting_tc.xy).r;

	float3 diffuse = lerp((ground_tex_detail.Sample(aniso_sampler, texcoord.xy).rgb + ground_tex_base.Sample(aniso_sampler, texcoord.xy / 16).rgb) / 2,
		grass_tex_base.Sample(aniso_sampler, texcoord.xy).rgb, saturate(texcoord.z));
	float specular = 0;
	
	StoreGBufferMRT(normal, specular, shininess_clr.x, diffuse,
		mrt_0, mrt_1);
}
		]]>
	</shader>

	<technique name="TerrainGBufferRT0" inherit="GBufferRT0Tech">
		<pass name="p0">
			<state name="vertex_shader" value="TerrainGBufferVS()"/>
			<state name="pixel_shader" value="TerrainGBufferRT0PS()"/>
		</pass>
	</technique>

	<technique name="TerrainGBufferRT1" inherit="GBufferRT1Tech">
		<pass name="p0">
			<state name="vertex_shader" value="TerrainGBufferVS()"/>
			<state name="pixel_shader" value="TerrainGBufferRT1PS()"/>
		</pass>
	</technique>
	
	<technique name="TerrainGBufferMRT" inherit="GBufferMRTTech">
		<pass name="p0">
			<state name="vertex_shader" value="TerrainGBufferVS()"/>
			<state name="pixel_shader" value="TerrainGBufferMRTPS()"/>
		</pass>
	</technique>

	<shader>
		<![CDATA[
void TerrainGenShadowMapVS(float2 pos : POSITION,
						out float3 oTc : TEXCOORD0,
						out float4 oPos : SV_Position)
{
	float3 normal;
	NoiseTerrain(pos,
		normal, oTc, oPos);
}
		]]>
	</shader>

	<technique name="TerrainGenShadowMap" inherit="GenShadowMapTech">
		<pass name="p0">
			<state name="vertex_shader" value="TerrainGenShadowMapVS()"/>
		</pass>
	</technique>	
</effect>
