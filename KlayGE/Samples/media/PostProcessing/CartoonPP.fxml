<?xml version='1.0'?>

<effect>
	<include name="PostProcess.fxml"/>
	
	<parameter type="float2" name="inv_width_height"/>
	<parameter type="float" name="inv_far"/>

	<parameter type="sampler" name="point_sampler">
		<state name="filtering" value="min_mag_mip_point"/>
		<state name="address_u" value="clamp"/>
		<state name="address_v" value="clamp"/>
	</parameter>

	<parameter type="texture2D" name="normal_tex"/>
	<parameter type="texture2D" name="depth_tex"/>
	<parameter type="texture2D" name="color_tex"/>

	<shader>
		<![CDATA[
void PostToonVS(float4 pos : POSITION,
				out float2 oTc0 : TEXCOORD0, // center
				out float4 oTc1 : TEXCOORD1, // left top / top
				out float4 oTc2 : TEXCOORD2, // right top / right
				out float4 oTc3 : TEXCOORD3, // right bottom / bottom
				out float4 oTc4 : TEXCOORD4, // left bottom / left
				out float4 oPos : SV_Position)
{
	PostProcessVS(pos, oTc0, oPos);

	oTc1 = oTc0.xyxy + inv_width_height.xyxy * float4(-1, -1, +0, -1);
	oTc2 = oTc0.xyxy + inv_width_height.xyxy * float4(+1, -1, +1, +0);
	oTc3 = oTc0.xyxy + inv_width_height.xyxy * float4(+1, +1, +0, +1);
	oTc4 = oTc0.xyxy + inv_width_height.xyxy * float4(-1, +1, -1, +0);
}

float4 PostToonPS(float2 tc0 : TEXCOORD0,
				float4 tc1 : TEXCOORD1,
				float4 tc2 : TEXCOORD2,
				float4 tc3 : TEXCOORD3,
				float4 tc4 : TEXCOORD4) : SV_Target
{
	float4 color = color_tex.Sample(point_sampler, tc0);
	float toon = dot(saturate(color.rgb), float3(0.2126f, 0.7152f, 0.0722f));

	float4 nd[9];
	// Retrieve normal and depth data for all neighbors.
	nd[0] = float4(normalize(normal_tex.Sample(point_sampler, tc0).xyz), depth_tex.Sample(point_sampler, tc0).x);
	nd[1] = float4(normalize(normal_tex.Sample(point_sampler, tc1.xy).xyz), depth_tex.Sample(point_sampler, tc1.xy).x);
	nd[2] = float4(normalize(normal_tex.Sample(point_sampler, tc1.zw).xyz), depth_tex.Sample(point_sampler, tc1.zw).x);
	nd[3] = float4(normalize(normal_tex.Sample(point_sampler, tc2.xy).xyz), depth_tex.Sample(point_sampler, tc2.xy).x);
	nd[4] = float4(normalize(normal_tex.Sample(point_sampler, tc2.zw).xyz), depth_tex.Sample(point_sampler, tc2.zw).x);
	nd[5] = float4(normalize(normal_tex.Sample(point_sampler, tc3.xy).xyz), depth_tex.Sample(point_sampler, tc3.xy).x);
	nd[6] = float4(normalize(normal_tex.Sample(point_sampler, tc3.zw).xyz), depth_tex.Sample(point_sampler, tc3.zw).x);
	nd[7] = float4(normalize(normal_tex.Sample(point_sampler, tc4.xy).xyz), depth_tex.Sample(point_sampler, tc4.xy).x);
	nd[8] = float4(normalize(normal_tex.Sample(point_sampler, tc4.zw).xyz), depth_tex.Sample(point_sampler, tc4.zw).x);

	// Compute Deltas in Depth.
	float4 Deltas1;
	float4 Deltas2;
	float depth0 = nd[0].w;
	Deltas1.x = nd[1].w;
	Deltas1.y = nd[2].w;
	Deltas1.z = nd[3].w;
	Deltas1.w = nd[4].w;
	Deltas2.x = nd[5].w;
	Deltas2.y = nd[6].w;
	Deltas2.z = nd[7].w;
	Deltas2.w = nd[8].w;
	// Compute andbsolute gradients from center.
	Deltas1 = abs(Deltas1 - depth0) * inv_far;
	Deltas2 = abs(depth0 - Deltas2) * inv_far;
	// Find min and max gradient, ensuring min != 0
	float4 maxDeltas = max(Deltas1, Deltas2);
	float4 minDeltas = max(min(Deltas1, Deltas2), 0.00001);
	// Compare change in gradients, flagging ones that change
	// significantly.
	// How severe the change must be to get flagged is a function of the
	// minimum gradient. It is not resolution dependent. The constant
	// number here would change based on how the depth values are stored
	// and how sensitive the edge detection should be.
	float4 depthResults = step(minDeltas * 10.0, maxDeltas);
	// Compute change in the cosine of the angle between normals.
	float3 normal0 = nd[0].xyz;
	Deltas1.x = dot(nd[1].xyz, normal0);
	Deltas1.y = dot(nd[2].xyz, normal0);
	Deltas1.z = dot(nd[3].xyz, normal0);
	Deltas1.w = dot(nd[4].xyz, normal0);
	Deltas2.x = dot(nd[5].xyz, normal0);
	Deltas2.y = dot(nd[6].xyz, normal0);
	Deltas2.z = dot(nd[7].xyz, normal0);
	Deltas2.w = dot(nd[8].xyz, normal0);
	Deltas1 = abs(Deltas1 - Deltas2);
	// Compare change in the cosine of the angles, flagging changes
	// above some constant threshold. The cosine of the angle is not a
	// linear function of the angle, so to have the flagging be
	// independent of the angles involved, an arccos function would be
	// required.
	float4 normalResults = step(0.4, Deltas1);
	normalResults = max(normalResults, depthResults);
	float dne = 1 - dot(normalResults, 0.25);
	
	const float toon_clr[3] = { 0.47f, 0.63f, 1 };
	return toon_clr[int(toon * 2 + 0.5f)] * dne * color;
}
		]]>
	</shader>

	<technique name="Cartoon">
		<pass name="p0">
			<state name="depth_enable" value="false"/>
			<state name="depth_write_mask" value="false"/>
			
			<state name="vertex_shader" value="PostToonVS()"/>
			<state name="pixel_shader" value="PostToonPS()"/>
		</pass>
	</technique>
</effect>
