<?xml version='1.0'?>

<effect>
	<include name="Lighting.fxml"/>
	<include name="util.fxml"/>
	<include name="Quaternion.fxml"/>

	<parameter type="float3" name="light_pos"/>
	<parameter type="float3" name="eye_pos"/>
	<parameter type="float" name="alpha"/>

	<cbuffer name="per_frame">
		<parameter type="float3" name="pos_center"/>
		<parameter type="float3" name="pos_extent"/>
		<parameter type="float2" name="tc_center"/>
		<parameter type="float2" name="tc_extent"/>
		
		<parameter type="float4x4" name="mvp" semantic="WORLDVIEWPROJECTION"/>
	</cbuffer>

	<parameter type="texture2D" name="diffuse_tex"/>
	<parameter type="texture2D" name="specular_tex"/>
	<parameter type="texture2D" name="normal_tex"/>
	<parameter type="texture2D" name="emit_tex"/>

	<parameter type="sampler" name="linear_sampler">
		<state name="filtering" value="min_mag_mip_linear"/>
		<state name="address_u" value="clamp"/>
		<state name="address_v" value="clamp"/>
	</parameter>

	<shader>
		<![CDATA[
void Transform(float4 pos, float2 texcoord, float4 tangent_quat,
					out float4 oL, out float4 oH, out float4 oPos)
{
	pos = float4(pos.xyz * pos_extent + pos_center, 1);
	texcoord = texcoord * tc_extent + tc_center;
	tangent_quat = tangent_quat * 2 - 1;
	
	oPos = mul(pos, mvp);
	
	float3x3 obj_to_tangent;
	obj_to_tangent[0] = transform_quat(float3(1, 0, 0), tangent_quat);
	obj_to_tangent[1] = transform_quat(float3(0, 1, 0), tangent_quat) * sign(tangent_quat.w);
	obj_to_tangent[2] = transform_quat(float3(0, 0, 1), tangent_quat);
	
	float3 light_vec = light_pos - pos.xyz;
	float3 view_vec = eye_pos - pos.xyz;
	float3 half_vec = normalize(light_vec) + normalize(view_vec);
	
	oL.xyz = mul(obj_to_tangent, light_vec);
	oH.xyz = mul(obj_to_tangent, half_vec);
	
	oL.w = texcoord.x;
	oH.w = texcoord.y;
}

float4 Shading(float4 L, float4 H)
{
	float2 uv = float2(L.w, H.w);

	float3 diffuse = diffuse_tex.Sample(linear_sampler, uv).xyz;
	float specular = specular_tex.Sample(linear_sampler, uv).x;
	float3 normal = decompress_normal(normal_tex.Sample(linear_sampler, uv));
	float3 emit = emit_tex.Sample(linear_sampler, uv).xyz * 16;

	float3 light_vec = normalize(L.xyz);
	float3 halfway = normalize(H.xyz);

	return float4(0.2f * diffuse + emit + calc_brdf(diffuse, 0.5f, specular * 256, light_vec, halfway, normal), alpha);
}

void NoOITVS(float4 pos				: POSITION,
					float2 texcoord			: TEXCOORD0,
					float4 tangent_quat		: TANGENT,
					out float4 oL			: TEXCOORD0,
					out float4 oH			: TEXCOORD1,
					out float4 oPos			: SV_Position)
{
	Transform(pos, texcoord, tangent_quat,
		oL, oH, oPos);
}

float4 NoOITPS(float4 L : TEXCOORD0,
					float4 H : TEXCOORD1) : SV_Target
{
	return Shading(L, H);
}
		]]>
	</shader>

	<technique name="NoOIT">
		<pass name="p0">
			<state name="blend_enable" value="true"/>
			<state name="src_blend" value="src_alpha"/>
			<state name="dest_blend" value="inv_src_alpha"/>

			<state name="depth_enable" value="false"/>
			<state name="depth_write_mask" value="0"/>

			<state name="vertex_shader" value="NoOITVS()"/>
			<state name="pixel_shader" value="NoOITPS()"/>
		</pass>
	</technique>
</effect>
