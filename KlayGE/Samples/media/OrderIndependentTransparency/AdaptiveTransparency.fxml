<?xml version='1.0'?>

<effect>
	<macro name="TEMPORARY_BUFFER_MAX" value="8"/>

	<cbuffer name="per_frame">
		<parameter type="int" name="frame_width"/>
	</cbuffer>

	<parameter type="structured_buffer" elem_type="float4" name="frags_buffer"/>
	<parameter type="buffer" elem_type="uint" name="start_offset_buffer"/>

	<shader version="5">
		<![CDATA[
void FindFragment(float oit_depth[TEMPORARY_BUFFER_MAX + 1], float oit_trans[TEMPORARY_BUFFER_MAX + 1], float frag_depth,
		out uint index, out float ret_trans)
{
	float4 depth, trans;

	if (frag_depth > oit_depth[3])
	{
		depth = float4(oit_depth[4], oit_depth[5], oit_depth[6], oit_depth[7]);
		trans = float4(oit_trans[4], oit_trans[5], oit_trans[6], oit_trans[7]);
		index = 4;
	}
	else
	{
		depth = float4(oit_depth[0], oit_depth[1], oit_depth[2], oit_depth[3]);
		trans = float4(oit_trans[0], oit_trans[1], oit_trans[2], oit_trans[3]);
		index = 0;
	}

	if (frag_depth <= depth.x)
	{
		ret_trans = oit_trans[max(0, index - 1)];
	}
	else if (frag_depth <= depth.y)
	{
		index += 1;
		ret_trans = trans.x;
	}
	else if (frag_depth <= depth.z)
	{
		index += 2;
		ret_trans = trans.y;
	}
	else if (frag_depth <= depth.w)
	{
		index += 3;
		ret_trans = trans.z;
	}
	else
	{
		index += 4;
		ret_trans = trans.w;
	}
}

void InsertFragment(float frag_depth,
						float frag_trans,
						inout float oit_depth[TEMPORARY_BUFFER_MAX + 1],
						inout float oit_trans[TEMPORARY_BUFFER_MAX + 1])
{
	uint index;
	float find_trans;
	FindFragment(oit_depth, oit_trans, frag_depth, index, find_trans);
	float prev_trans = index != 0 ? find_trans : 1;

	for (uint i = TEMPORARY_BUFFER_MAX; i > 0; -- i)
	{
		if (index <= i - 1)
		{
			oit_depth[i] = oit_depth[i - 1];
			oit_trans[i] = oit_trans[i - 1] * frag_trans;
		}
	}
	for (i = 0; i <= TEMPORARY_BUFFER_MAX; ++ i)
	{
		if (index == i)
		{
			oit_depth[i] = frag_depth;
			oit_trans[i] = frag_trans * prev_trans;
		}
	}

	if (oit_depth[TEMPORARY_BUFFER_MAX] <= 1)
	{
		const uint start_removal_idx = TEMPORARY_BUFFER_MAX / 2;

		float node_under_err[TEMPORARY_BUFFER_MAX];
		for (i = start_removal_idx; i < TEMPORARY_BUFFER_MAX; ++ i)
		{
			node_under_err[i] = (oit_depth[i] - oit_depth[i - 1]) * (oit_trans[i - 1] - oit_trans[i]);
		}

		uint smallest_err_idx = start_removal_idx;
		float smallest_err = node_under_err[smallest_err_idx];
		for (i = start_removal_idx + 1; i < TEMPORARY_BUFFER_MAX; ++ i)
		{
			if (node_under_err[i] < smallest_err)
			{
				smallest_err = node_under_err[i];
				smallest_err_idx = i;
			}
		}

		for (i = start_removal_idx; i < TEMPORARY_BUFFER_MAX; ++ i)
		{
			if (i >= smallest_err_idx)
			{
				oit_depth[i] = oit_depth[i + 1];
			}
		}
		for (i = start_removal_idx - 1; i < TEMPORARY_BUFFER_MAX; ++ i)
		{
			if (i >= smallest_err_idx - 1)
			{
				oit_trans[i] = oit_trans[i + 1];
			}
		}
	}
}

void RenderAdaptiveTransparencyVS(uint vertex_id : SV_VertexID,
					out float2 oTex : TEXCOORD0,
					out float4 oPos : SV_Position)
{
	float2 quad_texs[4] = { float2(0, 0), float2(1, 0), float2(0, 1), float2(1, 1) };
	oTex = quad_texs[vertex_id];
	
	oPos.xy = oTex * 2 - 1;
	oPos.y *= KLAYGE_FLIPPING;
	oPos.zw = float2(0, 1);
}

float4 RenderAdaptiveTransparencyPS(float2 tex : TEXCOORD0, float4 pos : SV_Position) : SV_Target
{
	uint index = (uint)pos.y * frame_width + (uint)pos.x;

	float4 result = float4(0, 0, 0, 1);
	uint start = start_offset_buffer[index];
	if (start != 0xFFFFFFFF)
	{
		float oit_depth[TEMPORARY_BUFFER_MAX + 1];
		float oit_trans[TEMPORARY_BUFFER_MAX + 1];
		for (uint i = 0; i < TEMPORARY_BUFFER_MAX; ++ i)
		{
			oit_depth[i] = 1.1f;
			oit_trans[i] = 1.0f;
		}

		uint next = start;
		while (next != 0xFFFFFFFF)
		{
			float4 frag_data = frags_buffer[next];

			float depth = frag_data.z;
			float trans = f16tof32(asuint(frag_data.y) >> 16);
			InsertFragment(depth, 1 - trans, oit_depth, oit_trans);

			next = asuint(frag_data.w);
		}

		float3 color = 0;
		next = start;
		while (next != 0xFFFFFFFF)
		{
			float4 frag_data = frags_buffer[next];

			float depth = frag_data.z;

			uint2 u16_color = asuint(frag_data.xy);
			float4 node_color;
			node_color.r = f16tof32(u16_color.x & 0xFFFF);
			node_color.g = f16tof32(u16_color.x >> 16);
			node_color.b = f16tof32(u16_color.y & 0xFFFF);
			node_color.a = f16tof32(u16_color.y >> 16);

			uint frag_index;
			float frag_trans;
			FindFragment(oit_depth, oit_trans, depth, frag_index, frag_trans);
			float vis = (0 == frag_index) ? 1 : frag_trans;
			color += node_color.rgb * node_color.a * vis;

			next = asuint(frag_data.w);
		}

		result = float4(color, oit_trans[TEMPORARY_BUFFER_MAX - 1]);
	}

	return result;
}
		]]>
	</shader>

	<technique name="RenderAdaptiveTransparency">
		<pass name="p0">
			<state name="depth_enable" value="false"/>
			<state name="depth_write_mask" value="0"/>

			<state name="blend_enable" value="true"/>
			<state name="src_blend" value="one"/>
			<state name="dest_blend" value="src_alpha"/>

			<state name="vertex_shader" value="RenderAdaptiveTransparencyVS()"/>
			<state name="pixel_shader" value="RenderAdaptiveTransparencyPS()"/>
		</pass>
	</technique>
</effect>
